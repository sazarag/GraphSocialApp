<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Trinity.Core</name>
  </assembly>
  <members>
    <member name="T:Trinity.Linq.PLINQWrapper`1">
      <summary>
            Provides a wrapper that redirects CellAccessorSelector.AsParallel().
            </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Aggregate(System.Func{`0,`0,`0})">
      <summary>
                 Applies an accumulator function over a sequence.
             </summary>
      <param name="func">
                 An accumulator function to be invoked on each element.
             </param>
      <returns>
                 The final accumulator value.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or func is null.
             </exception>
      <exception cref="T:System.InvalidOperationException">
                 source contains no elements.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Aggregate``1(``0,System.Func{``0,`0,``0})">
      <summary>
                 Applies an accumulator function over a sequence. The specified seed value
                 is used as the initial accumulator value.
             </summary>
      <param name="seed">
                 The initial accumulator value.
             </param>
      <param name="func">
                 An accumulator function to be invoked on each element.
             </param>
      <typeparam name="TAccumulate">
                 The type of the accumulator value.
             </typeparam>
      <returns>
                 The final accumulator value.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or func is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Aggregate``2(``0,System.Func{``0,`0,``0},System.Func{``0,``1})">
      <summary>
                 Applies an accumulator function over a sequence. The specified seed value
                 is used as the initial accumulator value, and the specified function is used
                 to select the result value.
             </summary>
      <param name="seed">
                 The initial accumulator value.
             </param>
      <param name="func">
                 An accumulator function to be invoked on each element.
             </param>
      <param name="resultSelector">
                 A function to transform the final accumulator value into the result value.
             </param>
      <typeparam name="TAccumulate">
                 The type of the accumulator value.
             </typeparam>
      <typeparam name="TResult">
                 The type of the resulting value.
             </typeparam>
      <returns>
                 The transformed final accumulator value.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or func or resultSelector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.All(System.Func{`0,System.Boolean})">
      <summary>
                Determines whether all elements of a sequence satisfy a condition.
            </summary>
      <param name="predicate">
                A function to test each element for a condition.
            </param>
      <returns>
                true if every element of the source sequence passes the test in the specified
                predicate, or if the sequence is empty; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Any">
      <summary>
                Determines whether a sequence contains any elements.
            </summary>
      <returns>
                true if the source sequence contains any elements; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Any(System.Func{`0,System.Boolean})">
      <summary>
                Determines whether any element of a sequence satisfies a condition.
            </summary>
      <param name="predicate">
                A function to test each element for a condition.
            </param>
      <returns>
                true if any elements in the source sequence pass the test in the specified
                predicate; otherwise, false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.AsEnumerable">
      <summary>
                Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
      <returns>
                The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </returns>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Nullable{System.Decimal}})">
      <summary>
                Computes the average of a sequence of nullable System.Decimal values that
                are obtained by invoking a transform function on each element of the input
                sequence.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The average of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.OverflowException">
                The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Decimal})">
      <summary>
                 Computes the average of a sequence of System.Decimal values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The average of the sequence of values.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
      <exception cref="T:System.InvalidOperationException">
                 source contains no elements.
             </exception>
      <exception cref="T:System.OverflowException">
                 The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Nullable{System.Double}})">
      <summary>
                 Computes the average of a sequence of nullable System.Double values that
                 are obtained by invoking a transform function on each element of the input
                 sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The average of the sequence of values, or null if the source sequence is
                 empty or contains only values that are null.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Double})">
      <summary>
                Computes the average of a sequence of System.Double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The average of the sequence of values.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Nullable{System.Single}})">
      <summary>
                 Computes the average of a sequence of nullable System.Single values that
                 are obtained by invoking a transform function on each element of the input
                 sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The average of the sequence of values, or null if the source sequence is
                 empty or contains only values that are null.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Single})">
      <summary>
                Computes the average of a sequence of System.Single values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The average of the sequence of values.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Nullable{System.Int32}})">
      <summary>
                 Computes the average of a sequence of nullable System.Int32 values that are
                 obtained by invoking a transform function on each element of the input sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The average of the sequence of values, or null if the source sequence is
                 empty or contains only values that are null.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
      <exception cref="T:System.OverflowException">
                 The sum of the elements in the sequence is larger than System.Int64.MaxValue.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Int32})">
      <summary>
                 Computes the average of a sequence of System.Int32 values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The average of the sequence of values.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
      <exception cref="T:System.InvalidOperationException">
                 source contains no elements.
             </exception>
      <exception cref="T:System.OverflowException">
                 The sum of the elements in the sequence is larger than System.Int64.MaxValue.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Nullable{System.Int64}})">
      <summary>
                 Computes the average of a sequence of nullable System.Int64 values that are
                 obtained by invoking a transform function on each element of the input sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The average of the sequence of values, or null if the source sequence is
                 empty or contains only values that are null.
             </returns>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Int64})">
      <summary>
                 Computes the average of a sequence of System.Int64 values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The average of the sequence of values.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
      <exception cref="T:System.InvalidOperationException">
                 source contains no elements.
             </exception>
      <exception cref="T:System.OverflowException">
                 The sum of the elements in the sequence is larger than System.Int64.MaxValue.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Cast``1">
      <summary>
                 Casts the elements of an <see cref="T:System.Linq.ParallelQuery" /> to the specified
                 type.
             </summary>
      <returns>
                 A System.Linq.ParallelQuery{T} that contains each element of
                 the source sequence cast to the specified type.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
      <exception cref="T:System.InvalidCastException">
                 An element in the sequence cannot be cast to type TResult.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Contains(`0)">
      <summary>
                 Determines whether a sequence contains a specified element by using the default
                 equality comparer.
             </summary>
      <param name="value">
                 The value to locate in the sequence.
             </param>
      <returns>
                 true if the source sequence contains an element that has the specified value;
                 otherwise, false.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                 Determines whether a sequence contains a specified element by using a specified
                 System.Collections.Generic.IEqualityComparer{T}.
             </summary>
      <param name="value">
                 The value to locate in the sequence.
             </param>
      <param name="comparer">
                 An equality comparer to compare values.
             </param>
      <returns>
                 true if the source sequence contains an element that has the specified value;
                 otherwise, false.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Count">
      <summary>
                Returns the number of elements in a sequence.
            </summary>
      <returns>
                The number of elements in the input sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
      <exception cref="T:System.OverflowException">
                The number of elements in source is larger than System.Int32.MaxValue.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Count(System.Func{`0,System.Boolean})">
      <summary>
                 Returns a number that represents how many elements in the specified sequence
                 satisfy a condition.
             </summary>
      <param name="predicate">
                 A function to test each element for a condition.
             </param>
      <returns>
                 A number that represents how many elements in the sequence satisfy the condition
                 in the predicate function.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
      <exception cref="T:System.OverflowException">
                 The number of elements in source is larger than System.Int32.MaxValue.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.First">
      <summary>
                 Returns the first element of a sequence.
             </summary>
      <returns>
                 The first element in the specified sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
      <exception cref="T:System.InvalidOperationException">
                 The source sequence is empty.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.First(System.Func{`0,System.Boolean})">
      <summary>
                 Returns the first element in a sequence that satisfies a specified condition.
             </summary>
      <param name="predicate">
                 A function to test each element for a condition.
             </param>
      <returns>
                 The first element in the sequence that passes the test in the specified predicate
                 function.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
      <exception cref="T:System.InvalidOperationException">
                 No element satisfies the condition in predicate.-or-The source sequence is
             </exception>
                 empty.
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.FirstOrDefault">
      <summary>
                 Returns the first element of a sequence, or a default value if the sequence
                 contains no elements.
             </summary>
      <returns>
                 default(TSource) if source is empty; otherwise, the first element in source.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.FirstOrDefault(System.Func{`0,System.Boolean})">
      <summary>
                Returns the first element of the sequence that satisfies a condition or a
                default value if no such element is found.
            </summary>
      <param name="predicate">
                A function to test each element for a condition.
            </param>
      <returns>
                default(TSource) if source is empty or if no element passes the test specified
                by predicate; otherwise, the first element in source that passes the test
                specified by predicate.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Last">
      <summary>
                Returns the last element of a sequence.
            </summary>
      <returns>
                The value at the last position in the source sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Last(System.Func{`0,System.Boolean})">
      <summary>
                 Returns the last element of a sequence that satisfies a specified condition.
             </summary>
      <param name="predicate">
                 A function to test each element for a condition.
             </param>
      <returns>
                 The last element in the sequence that passes the test in the specified predicate
                 function.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
      <exception cref="T:System.InvalidOperationException">
                 No element satisfies the condition in predicate.-or-The source sequence is
             </exception>
                 empty.
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.LastOrDefault">
      <summary>
                 Returns the last element of a sequence, or a default value if the sequence
                 contains no elements.
             </summary>
      <returns>
                 default(TSource) if the source sequence is empty; otherwise, the last element
                 in the Trinity.Index.LINQ.ParallelQuery{T}.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.LastOrDefault(System.Func{`0,System.Boolean})">
      <summary>
                Returns the last element of a sequence that satisfies a condition or a default
                value if no such element is found.
            </summary>
      <param name="predicate">
                A function to test each element for a condition.
            </param>
      <returns>
                default(TSource) if the sequence is empty or if no elements pass the test
                in the predicate function; otherwise, the last element that passes the test
                in the predicate function.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.LongCount">
      <summary>
                Returns an System.Int64 that represents the total number of elements in a
                sequence.
            </summary>
      <returns>
                The number of elements in the source sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
      <exception cref="T:System.OverflowException">
                The number of elements exceeds System.Int64.MaxValue.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.LongCount(System.Func{`0,System.Boolean})">
      <summary>
                 Returns an System.Int64 that represents how many elements in a sequence satisfy
                 a condition.
             </summary>
      <param name="predicate">
                 A function to test each element for a condition.
             </param>
      <returns>
                 A number that represents how many elements in the sequence satisfy the condition
                 in the predicate function.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
      <exception cref="T:System.OverflowException">
                 The number of matching elements exceeds System.Int64.MaxValue.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Nullable{System.Decimal}})">
      <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum nullable System.Decimal value.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The value of type Nullable{Decimal} in C# or Nullable(Of Decimal) in Visual
                 Basic that corresponds to the maximum value in the sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Decimal})">
      <summary>
                Invokes a transform function on each element of a sequence and returns the
                maximum System.Decimal value.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The maximum value in the sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Nullable{System.Double}})">
      <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum nullable System.Double value.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The value of type Nullable{Double} in C# or Nullable(Of Double) in Visual
                 Basic that corresponds to the maximum value in the sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Double})">
      <summary>
                Invokes a transform function on each element of a sequence and returns the
                maximum System.Double value.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The maximum value in the sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Nullable{System.Single}})">
      <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum nullable System.Single value.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The value of type Nullable{Single} in C# or Nullable(Of Single) in Visual
                 Basic that corresponds to the maximum value in the sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Single})">
      <summary>
                Invokes a transform function on each element of a sequence and returns the
                maximum System.Single value.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The maximum value in the sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Nullable{System.Int32}})">
      <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum nullable System.Int32 value.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The value of type Nullable{Int32} in C# or Nullable(Of Int32) in Visual Basic
                 that corresponds to the maximum value in the sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Int32})">
      <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum System.Int32 value.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The maximum value in the sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
      <exception cref="T:System.InvalidOperationException">
                 source contains no elements.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Nullable{System.Int64}})">
      <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum nullable System.Int64 value.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The value of type Nullable{Int64} in C# or Nullable(Of Int64) in Visual Basic
                 that corresponds to the maximum value in the sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Int64})">
      <summary>
                Invokes a transform function on each element of a sequence and returns the
                maximum System.Int64 value.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The maximum value in the sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Nullable{System.Decimal}})">
      <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 minimum nullable System.Decimal value.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The value of type Nullable{Decimal} in C# or Nullable(Of Decimal) in Visual
                 Basic that corresponds to the minimum value in the sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Decimal})">
      <summary>
                Invokes a transform function on each element of a sequence and returns the
                minimum System.Decimal value.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The minimum value in the sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Nullable{System.Double}})">
      <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 minimum nullable System.Double value.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The value of type Nullable{Double} in C# or Nullable(Of Double) in Visual
                 Basic that corresponds to the minimum value in the sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Double})">
      <summary>
                Invokes a transform function on each element of a sequence and returns the
                minimum System.Double value.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The minimum value in the sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Nullable{System.Single}})">
      <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 minimum nullable System.Single value.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The value of type Nullable{Single} in C# or Nullable(Of Single) in Visual
                 Basic that corresponds to the minimum value in the sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Single})">
      <summary>
                Invokes a transform function on each element of a sequence and returns the
                minimum System.Single value.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The minimum value in the sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Nullable{System.Int32}})">
      <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 minimum nullable System.Int32 value.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The value of type Nullable{Int32} in C# or Nullable(Of Int32) in Visual Basic
                 that corresponds to the minimum value in the sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Int32})">
      <summary>
                Invokes a transform function on each element of a sequence and returns the
                minimum System.Int32 value.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The minimum value in the sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Nullable{System.Int64}})">
      <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 minimum nullable System.Int64 value.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The value of type Nullable{Int64} in C# or Nullable(Of Int64) in Visual Basic
                 that corresponds to the minimum value in the sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Int64})">
      <summary>
                Invokes a transform function on each element of a sequence and returns the
                minimum System.Int64 value.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The minimum value in the sequence.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Select``1(System.Func{`0,System.Int32,``0})">
      <summary>
                 Projects each element of a sequence into a new form by incorporating the
                 element's index.
             </summary>
      <param name="selector">
                 A transform function to apply to each source element; the second parameter
             </param>
                 of the function represents the index of the source element.
             
             <typeparam name="TResult">
                 The type of the value returned by selector.
             </typeparam><returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the transform function on each element of source.
             </returns><exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception></member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Select``1(System.Func{`0,``0})">
      <summary>
                 Projects each element of a sequence into a new form.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <typeparam name="TResult">
                 The type of the value returned by selector.
             </typeparam>
      <returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the transform function on each element of source.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
                 Projects each element of a sequence to an Trinity.Index.LINQ.ParallelQuery{T}
                 and flattens the resulting sequences into one sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <typeparam name="TResult">
                 The type of the elements of the sequence returned by selector.
             </typeparam>
      <returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the one-to-many transform function on each element of the input
                 sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.SelectMany``1(System.Func{`0,System.Int32,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
                 Projects each element of a sequence to an Trinity.Index.LINQ.ParallelQuery{T},
                 and flattens the resulting sequences into one sequence. The index of each
                 source element is used in the projected form of that element.
             </summary>
      <param name="selector">
                 A transform function to apply to each source element; the second parameter
             </param>
                 of the function represents the index of the source element.
             
             <typeparam name="TResult">
                 The type of the elements of the sequence returned by selector.
             </typeparam><returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the one-to-many transform function on each element of an input
                 sequence.
             </returns><exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception></member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})">
      <summary>
                 Projects each element of a sequence to an Trinity.Index.LINQ.ParallelQuery{T},
                 flattens the resulting sequences into one sequence, and invokes a result
                 selector function on each element therein.
             </summary>
      <param name="collectionSelector">
                 A transform function to apply to each element of the input sequence.
             </param>
      <param name="resultSelector">
                 A transform function to apply to each element of the intermediate sequence.
             </param>
      <typeparam name="TCollection">
                 The type of the intermediate elements collected by <paramref name="collectionSelector" />.
             </typeparam>
      <typeparam name="TResult">
                 The type of the elements of the resulting sequence.
             </typeparam>
      <returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the one-to-many transform function collectionSelector on each
                 element of source and then mapping each of those sequence elements and their
                 corresponding source element to a result element.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or collectionSelector or resultSelector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.SelectMany``2(System.Func{`0,System.Int32,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})">
      <summary>
                 Projects each element of a sequence to an Trinity.Index.LINQ.ParallelQuery{T},
                 flattens the resulting sequences into one sequence, and invokes a result
                 selector function on each element therein. The index of each source element
                 is used in the intermediate projected form of that element.
             </summary>
      <param name="collectionSelector">
                 A transform function to apply to each source element; the second parameter
             </param>
                 of the function represents the index of the source element.
             
             <param name="resultSelector">
                 A transform function to apply to each element of the intermediate sequence.
             </param><typeparam name="TCollection">
                 The type of the intermediate elements collected by collectionSelector.
             </typeparam><typeparam name="TResult">
                 The type of the elements of the resulting sequence.
             </typeparam><returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the one-to-many transform function collectionSelector on each
                 element of source and then mapping each of those sequence elements and their
                 corresponding source element to a result element.
             </returns><exception cref="T:System.ArgumentNullException">
                 source or collectionSelector or resultSelector is null.
             </exception></member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.SequenceEqual(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                Determines whether two sequences are equal by comparing their elements by
                using a specified System.Collections.Generic.IEqualityComparer{T}.
            </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.SequenceEqual(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                 Determines whether two sequences are equal by comparing the elements by using
                 the default equality comparer for their type.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Single">
      <summary>
                 Returns the only element of a sequence, and throws an exception if there
                 is not exactly one element in the sequence.
             </summary>
      <returns>
                 The single element of the input sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
      <exception cref="T:System.InvalidOperationException">
                 The input sequence contains more than one element.-or-The input sequence
             </exception>
                 is empty.
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Single(System.Func{`0,System.Boolean})">
      <summary>
                 Returns the only element of a sequence that satisfies a specified condition,
                 and throws an exception if more than one such element exists.
             </summary>
      <param name="predicate">
                 A function to test an element for a condition.
             </param>
      <returns>
                 The single element of the input sequence that satisfies a condition.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
      <exception cref="T:System.InvalidOperationException">
                 No element satisfies the condition in predicate.-or-More than one element
             </exception>
                 satisfies the condition in predicate.-or-The source sequence is empty.
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.SingleOrDefault">
      <summary>
                 Returns the only element of a sequence, or a default value if the sequence
                 is empty; this method throws an exception if there is more than one element
                 in the sequence.
             </summary>
      <returns>
                 The single element of the input sequence, or default(TSource) if the sequence
                 contains no elements.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
      <exception cref="T:System.InvalidOperationException">
                 The input sequence contains more than one element.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.SingleOrDefault(System.Func{`0,System.Boolean})">
      <summary>
                 Returns the only element of a sequence that satisfies a specified condition
                 or a default value if no such element exists; this method throws an exception
                 if more than one element satisfies the condition.
             </summary>
      <param name="predicate">
                 A function to test an element for a condition.
             </param>
      <returns>
                 The single element of the input sequence that satisfies the condition, or
                 default(TSource) if no such element is found.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Skip(System.Int32)">
      <summary>
                 Bypasses a specified number of elements in a sequence and then returns the
                 remaining elements.
             </summary>
      <param name="count">
                 The number of elements to skip before returning the remaining elements.
             </param>
      <returns>
                 A Trinity.Index.LINQ.PLINQWrapper{T} that contains the elements that
                 occur after the specified index in the input sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.SkipWhile(System.Func{`0,System.Boolean})">
      <summary>
                 Bypasses elements in a sequence as long as a specified condition is true
                 and then returns the remaining elements.
             </summary>
      <param name="predicate">
                 A function to test each element for a condition.
             </param>
      <returns>
                 A Trinity.Index.LINQ.PLINQWrapper{T} that contains the elements from
                 the input sequence starting at the first element in the linear series that
                 does not pass the test specified by predicate.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.SkipWhile(System.Func{`0,System.Int32,System.Boolean})">
      <summary>
                 Bypasses elements in a sequence as long as a specified condition is true
                 and then returns the remaining elements. The element's index is used in the
                 logic of the predicate function.
             </summary>
      <param name="predicate">
                 A function to test each source element for a condition; the second parameter
             </param>
                 of the function represents the index of the source element.
            
             <returns>
                 A Trinity.Index.LINQ.PLINQWrapper{T} that contains the elements from
                 the input sequence starting at the first element in the linear series that
                 does not pass the test specified by predicate.
             </returns><exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception></member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Nullable{System.Decimal}})">
      <summary>
                Computes the sum of the sequence of nullable System.Decimal values that are
                obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The sum of the projected values.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.OverflowException">
                The sum is larger than System.Decimal.MaxValue.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Decimal})">
      <summary>
                 Computes the sum of the sequence of System.Decimal values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The sum of the projected values.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
      <exception cref="T:System.OverflowException">
                 The sum is larger than System.Decimal.MaxValue.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Nullable{System.Double}})">
      <summary>
                 Computes the sum of the sequence of nullable System.Double values that are
                 obtained by invoking a transform function on each element of the input sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The sum of the projected values.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Double})">
      <summary>
                Computes the sum of the sequence of System.Double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The sum of the projected values.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Nullable{System.Single}})">
      <summary>
                Computes the sum of the sequence of nullable System.Single values that are
                obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The sum of the projected values.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Single})">
      <summary>
                Computes the sum of the sequence of System.Single values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The sum of the projected values.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Nullable{System.Int32}})">
      <summary>
                Computes the sum of the sequence of nullable System.Int32 values that are
                obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <param name="selector">
                A transform function to apply to each element.
            </param>
      <returns>
                The sum of the projected values.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
      <exception cref="T:System.OverflowException">
                The sum is larger than System.Int32.MaxValue.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Int32})">
      <summary>
                 Computes the sum of the sequence of System.Int32 values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The sum of the projected values.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
      <exception cref="T:System.OverflowException">
                 The sum is larger than System.Int32.MaxValue.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Nullable{System.Int64}})">
      <summary>
                 Computes the sum of the sequence of nullable System.Int64 values that are
                 obtained by invoking a transform function on each element of the input sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The sum of the projected values.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
      <exception cref="T:System.OverflowException">
                 The sum is larger than System.Int64.MaxValue.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Int64})">
      <summary>
                 Computes the sum of the sequence of System.Int64 values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
      <param name="selector">
                 A transform function to apply to each element.
             </param>
      <returns>
                 The sum of the projected values.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
      <exception cref="T:System.OverflowException">
                 The sum is larger than System.Int64.MaxValue.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Take(System.Int32)">
      <summary>
                 Returns a specified number of contiguous elements from the start of a sequence.
             </summary>
      <param name="count">
                 The number of elements to return.
             </param>
      <returns>
                 A Trinity.Index.LINQ.PLINQWrapper{T} that contains the specified
                 number of elements from the start of the input sequence.
             </returns>
      <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.TakeWhile(System.Func{`0,System.Boolean})">
      <summary>
                Returns elements from a sequence as long as a specified condition is true.
            </summary>
      <param name="predicate">
                A function to test each element for a condition.
            </param>
      <returns>
                A Trinity.Index.LINQ.PLINQWrapper{T} that contains the elements from
                the input sequence that occur before the element at which the test no longer
                passes.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.TakeWhile(System.Func{`0,System.Int32,System.Boolean})">
      <summary>
                Returns elements from a sequence as long as a specified condition is true.
                The element's index is used in the logic of the predicate function.
            </summary>
      <param name="predicate">
                A function to test each source element for a condition; the second parameter
            </param>
                of the function represents the index of the source element.
            
            <returns>
                A Trinity.Index.LINQ.PLINQWrapper{T} that contains elements from
                the input sequence that occur before the element at which the test no longer
                passes.
            </returns><exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception></member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Where(System.Func{`0,System.Boolean})">
      <summary>
                Filters a sequence of values based on a predicate.
            </summary>
      <param name="predicate">
                A function to test each element for a condition.
            </param>
      <returns>
                A Trinity.Index.LINQ.PLINQWrapper{T} that contains elements from
                the input sequence that satisfy the condition.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Where(System.Func{`0,System.Int32,System.Boolean})">
      <summary>
                Filters a sequence of values based on a predicate. Each element's index is
                used in the logic of the predicate function.
            </summary>
      <param name="predicate">
                A function to test each source element for a condition; the second parameter
            </param>
                of the function represents the index of the source element.
            
            <returns>
                A Trinity.Index.LINQ.PLINQWrapper{T} that contains elements from
                the input sequence that satisfy the condition.
            </returns><exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception></member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Concat(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                Concatenates two sequences.
            </summary>
            !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.DefaultIfEmpty">
      <summary>
                 Returns the elements of the specified sequence or the type parameter's default
                 value in a singleton collection if the sequence is empty.
             </summary>
             !NotImplemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.DefaultIfEmpty(`0)">
      <summary>
                 Returns the elements of the specified sequence or the specified value in
                 a singleton collection if the sequence is empty.
             </summary>
             !NotImplemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.OfType``1">
      <summary>
                 Filters the elements of an System.Collections.IEnumerable based on a specified
                 type.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.OrderBy``1(System.Func{`0,``0})">
      <summary>
                 Sorts the elements of a sequence in ascending order according to a key.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.OrderBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
      <summary>
                 Sorts the elements of a sequence in ascending order by using a specified
                 comparer.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.OrderByDescending``1(System.Func{`0,``0})">
      <summary>
                 Sorts the elements of a sequence in descending order according to a key.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.OrderByDescending``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
      <summary>
                 Sorts the elements of a sequence in descending order by using a specified
                 comparer.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Reverse">
      <summary>
                 Inverts the order of the elements in a sequence.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Distinct">
      <summary>
                 Returns distinct elements from a sequence by using the default equality comparer
                 to compare values.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Distinct(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                 Returns distinct elements from a sequence by using a specified System.Collections.Generic.IEqualityComparer{T}
                 to compare values.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ElementAt(System.Int32)">
      <summary>
                 Returns the element at a specified index in a sequence.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ElementAtOrDefault(System.Int32)">
      <summary>
                 Returns the element at a specified index in a sequence or a default value
                 if the index is out of range.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                 Produces the set difference of two sequences by using the default equality
                 comparer to compare values.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Except(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                 Produces the set difference of two sequences by using the specified System.Collections.Generic.IEqualityComparer{T}
                 to compare values.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.GroupBy``1(System.Func{`0,``0})">
      <summary>
                 Groups the elements of a sequence according to a specified key selector function.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.GroupBy``2(System.Func{`0,``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0},``1})">
      <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and creates a result value from each group and its key.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1})">
      <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and projects the elements for each group by using a specified function.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and compares the keys by using a specified comparer.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.GroupBy``2(System.Func{`0,``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0},``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and creates a result value from each group and its key. The keys are compared
                 by using a specified comparer.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.GroupBy``3(System.Func{`0,``0},System.Func{`0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``2})">
      <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and creates a result value from each group and its key. The elements of each
                 group are projected by using a specified function.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                 Groups the elements of a sequence according to a key selector function. The
                 keys are compared by using a comparer and each group's elements are projected
                 by using a specified function.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.GroupBy``3(System.Func{`0,``0},System.Func{`0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``2},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and creates a result value from each group and its key. Key values are compared
                 by using a specified comparer, and the elements of each group are projected
                 by using a specified function.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>
                 Correlates the elements of two sequences based on equality of keys and groups
                 the results. The default equality comparer is used to compare keys.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
                 Correlates the elements of two sequences based on key equality and groups
                 the results. A specified System.Collections.Generic.IEqualityComparer{T}
                 is used to compare keys.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                 Produces the set intersection of two sequences by using the default equality
                 comparer to compare values.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Intersect(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                Produces the set intersection of two sequences by using the specified System.Collections.Generic.IEqualityComparer{T}
                to compare values.
            </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Join``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>
                 Correlates the elements of two sequences based on matching keys. The default
                 equality comparer is used to compare keys.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Join``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
                 Correlates the elements of two sequences based on matching keys. A specified
                 System.Collections.Generic.IEqualityComparer{T} is used to compare keys.
             </summary>
    </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ThenBy``1(System.Func{`0,``0})">
      <summary>
                 Performs a subsequent ordering of the elements in a sequence in ascending
                 order according to a key.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ThenBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
      <summary>
                 Performs a subsequent ordering of the elements in a sequence in ascending
                 order by using a specified comparer.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ThenByDescending``1(System.Func{`0,``0})">
      <summary>
                 Performs a subsequent ordering of the elements in a sequence in descending
                 order, according to a key.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ThenByDescending``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
      <summary>
                 Performs a subsequent ordering of the elements in a sequence in descending
                 order by using a specified comparer.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ToArray">
      <summary>
                 Creates an array from a System.Collections.Generic.IEnumerable{T}.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ToDictionary``1(System.Func{`0,``0})">
      <summary>
                 Creates a System.Collections.Generic.Dictionary{TKey,TValue} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ToDictionary``2(System.Func{`0,``0},System.Func{`0,``1})">
      <summary>
                 Creates a System.Collections.Generic.Dictionary{TKey,TValue} from an System.Collections.Generic.IEnumerable{T}
                 according to specified key selector and element selector functions.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ToDictionary``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                 Creates a System.Collections.Generic.Dictionary{TKey,TValue} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function and key comparer.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ToDictionary``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                 Creates a System.Collections.Generic.Dictionary{TKey,TValue} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function, a comparer, and an element
                 selector function.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ToList">
      <summary>
                 Creates a System.Collections.Generic.List{T} from an System.Collections.Generic.IEnumerable{T}.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ToLookup``1(System.Func{`0,``0})">
      <summary>
                 Creates a System.Linq.Lookup{TKey,TElement} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ToLookup``2(System.Func{`0,``0},System.Func{`0,``1})">
      <summary>
                 Creates a System.Linq.Lookup{TKey,TElement} from an System.Collections.Generic.IEnumerable{T}
                 according to specified key selector and element selector functions.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ToLookup``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                 Creates a System.Linq.Lookup{TKey,TElement} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function and key comparer.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.ToLookup``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                 Creates a System.Linq.Lookup{TKey,TElement} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function, a comparer and an element
                 selector function.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>
                 Produces the set union of two sequences by using the default equality comparer.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Union(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
                 Produces the set union of two sequences by using a specified System.Collections.Generic.IEqualityComparer{T}.
             </summary>
             !Not implemented
        </member>
    <member name="M:Trinity.Linq.PLINQWrapper`1.Zip``3(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
                 Merges two sequences by using the specified predicate function.
             </summary>
             !Not implemented
        </member>
    <member name="T:Trinity.Network.BSP">
      <summary>
            Provides methods for global bulk synchronization
            </summary>
    </member>
    <member name="M:Trinity.Network.BSP.BarrierSync(System.Int32)">
      <summary>
            Sets a global barrier synchronization point for a specified BSP task. A process participating current BSP task waits until all other processes also reach this point.
            </summary>
      <param name="taskId">A user-specified task Id used to differentiate different barrier synchronization tasks.</param>
    </member>
    <member name="M:Trinity.Network.BSP.BarrierSync">
      <summary>
            Sets a global barrier synchronization point. A process participating current BSP task waits until all other processes also reach this point.
            </summary>
    </member>
    <member name="T:Trinity.Network.GetServerIdByCellIdDelegate">
      <summary>
            Represents the method that gets the server Id by the specified cell Id.
            </summary>
      <param name="cellId">A 64-bit Trinity cell Id.</param>
      <returns>The Trinity server Id.</returns>
    </member>
    <member name="T:Trinity.Storage.CellInfo">
      <summary>
            Represents the information describing a Trinity cell.
            </summary>
    </member>
    <member name="P:Trinity.Storage.CellInfo.CellPtr">
      <summary>
            Get a pointer to the content of the cell. Extra care should be taken
            when manipulating directly on the cell buffer, as no boundary checks
            are employed. Improper operations on the cell buffer will cause
            data corruption and system crash.
            </summary>
    </member>
    <member name="P:Trinity.Storage.CellInfo.CellId">
      <summary>
            Get the id of the cell.
            </summary>
    </member>
    <member name="P:Trinity.Storage.CellInfo.CellType">
      <summary>
            Get the type of the current cell. Not available when type system not enabled.
            </summary>
    </member>
    <member name="P:Trinity.Storage.CellInfo.CellSize">
      <summary>
            Gets the size of current cell in bytes.
            </summary>
    </member>
    <member name="T:Trinity.Storage.LocalMemoryStorage">
      <summary>
            Provides methods for interacting with Trinity key-value store.
            </summary>
      <summary>
            Provides methods for interacting with Trinity key-value store.
            </summary>
    </member>
    <member name="T:Trinity.Storage.Storage">
      <summary>
            This is an abstract key-value storage class. It defines a set of cell accessing and manipulation interfaces.
            </summary>
    </member>
    <member name="M:Trinity.Storage.Storage.Contains(System.Int64)">
      <summary>
            Determines whether there is a cell with the specified cell Id in Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <returns>true if a cell whose Id is cellId is found; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.GetCellType(System.Int64,System.UInt16@)">
      <summary>
            Gets the type of the cell with specified cell Id.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="cellType">The type of the cell specified by cellId.</param>
      <returns>A Trinity error code. Possible values are E_SUCCESS and E_NOT_FOUND.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.AddCell(System.Int64,System.Byte*,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="size">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.AddCell(System.Int64,System.Byte*,System.Int32)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.AddCell(System.Int64,System.Byte[])">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.AddCell(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.AddCell(System.Int64,System.Byte[],System.Int32,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="size">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.UpdateCell(System.Int64,System.Byte*,System.Int32)">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if updating succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.UpdateCell(System.Int64,System.Byte[])">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>true if updating succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.UpdateCell(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if updating succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.SaveCell(System.Int64,System.Byte*,System.Int32)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.SaveCell(System.Int64,System.Byte[])">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cell_id">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.SaveCell(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cell_id">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.SaveCell(System.Int64,System.Byte[],System.Int32,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="size">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.SaveCell(System.Int64,System.Byte*,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="size">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.LoadCell(System.Int64,System.Byte[]@)">
      <summary>
            Loads the bytes of the cell with the specified cell Id.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="cellBuff">The bytes of the cell. An empty byte array is returned if the cell is not found.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.LoadCell(System.Int64,System.Byte[]@,System.UInt16@)">
      <summary>
            Loads the bytes of the cell with the specified cell Id.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="cellBuff">The bytes of the cell. An empty byte array is returned if the cell is not found.</param>
      <param name="cellType">The type of the cell, represented with a 16-bit unsigned integer.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.RemoveCell(System.Int64)">
      <summary>
            Removes the cell with the specified cell Id from the key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <returns>true if removing succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.Storage.Dispose">
      <summary>
            Releases the resources used by the current storage instance.
            </summary>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.GetEnumerator">
      <summary>
            Returns an enumerator for all the cells stored in the local memory storage.
            </summary>
      <returns>An cell enumerator.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveCell(System.Int64,System.Byte[])">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if saving succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveCell(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if saving succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveCell(System.Int64,System.Byte[],System.Int32,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if saving succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveCell(System.Int64,System.Byte*,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="cellSize">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if saving succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveCell(System.Int64,System.Byte*,System.Int32)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if saving succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.AddCell(System.Int64,System.Byte*,System.Int32)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if adding succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.AddCell(System.Int64,System.Byte[])">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if adding succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.AddCell(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if adding succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.AddCell(System.Int64,System.Byte[],System.Int32,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if adding succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.AddCell(System.Int64,System.Byte*,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="cellSize">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if adding succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.UpdateCell(System.Int64,System.Byte*,System.Int32)">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if updating succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.UpdateCell(System.Int64,System.Byte[])">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if updating succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.UpdateCell(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if updating succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.LoadCell(System.Int64,System.Byte[]@,System.UInt16@)">
      <summary>
            Loads the bytes of the cell with the specified cell Id.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="cellBuff">The bytes of the cell. An empty byte array is returned if the cell is not found.</param>
      <param name="cellType">The type of the cell, represented with a 16-bit unsigned integer.</param>
      <returns>A Trinity error code. Possible values are E_SUCCESS and E_NOT_FOUND.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.LoadCell(System.Int64,System.Byte[]@)">
      <summary>
            Loads the bytes of the cell with the specified cell Id.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="cellBuff">The bytes of the cell. An empty byte array is returned if the cell is not found.</param>
      <returns>A Trinity error code. Possible values are E_SUCCESS and E_NOT_FOUND.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.RemoveCell(System.Int64)">
      <summary>
            Removes the cell with the specified cell Id from the key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <returns>
        <code>TrinityErrorCode.E_SUCCESS</code> if removing succeeds; otherwise, an error code.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.GetCellType(System.Int64,System.UInt16@)">
      <summary>
            Gets the type of the cell with specified cell Id.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="cellType">The type of the cell specified by cellId.</param>
      <returns>A Trinity error code. Possible values are E_SUCCESS and E_NOT_FOUND.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.Contains(System.Int64)">
      <summary>
            Determines whether there is a cell with the specified cell Id in Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <returns>true if a cell whose Id is cellId is found; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.NewRandomCellID">
      <summary>
            Generates a new random 64-bit cell id.
            </summary>
      <returns>A new 64-bit cell id.</returns>
      <remarks>This is a thread-safe method that you can call to get a new cell id.</remarks>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.NextSequentialCellID">
      <summary>
            Generates a sequentially incremented 64-bit cell id.
            </summary>
      <returns>A new 64-bit cell id.</returns>
      <remarks>This is a thread-safe method that you can call to get a new cell id.</remarks>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.LoadStorage">
      <summary>
            Loads Trinity key-value store from disk to main memory.
            </summary>
      <returns>true if loading succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveStorage">
      <summary>
            Dumps the in-memory key-value store to disk files.
            </summary>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.ResetStorage">
      <summary>
            Resets local memory storage to the initial state. The content in the memory storage will be cleared. And the memory storage will be shrunk to the initial size.
            </summary>
      <returns>true if resetting succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte[])">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte[],System.Int32,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte*,System.Int32,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte*,System.Int32,System.Int32)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.SaveCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte*,System.Int32)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.AddCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte*,System.Int32)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.AddCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte*,System.Int32,System.Int32)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.AddCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte[])">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.AddCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.AddCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte[],System.Int32,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.AddCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte*,System.Int32,System.Int32,System.UInt16)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <param name="cellType">Indicates the cell type.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.UpdateCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte*,System.Int32,System.Int32)">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>true if updating succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.UpdateCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte*,System.Int32)">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>true if updating succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.UpdateCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte[])">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>true if updating succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.UpdateCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="cellSize">The size of the cell.</param>
      <returns>true if updating succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.RemoveCell(Trinity.TSL.Lib.CellAccessOptions,System.Int64)">
      <summary>
            Removes the cell with the specified cell Id from the key-value store.
            </summary>
      <param name="writeAheadLogOptions">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
      <param name="cellId">A 64-bit cell Id.</param>
      <returns>true if removing succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.GetTrunkId(System.Int64)">
      <summary>
            Get the Memory Trunk Id for the specified 64-bit cell Id.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <returns>The Id of the memory trunk that stores the cell with the specified Id.</returns>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.#ctor">
      <summary>
            Initializes the LocalStorage instance.
            </summary>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.PauseMemoryDefragmentation">
      <summary>
            Pauses the memory defragmentation daemon thread.
            </summary>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.RestartMemoryDefragmentation">
      <summary>
            Restarts the memory defragmentation daemon thread.
            </summary>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.Finalize">
      <summary>
            Destructs current LocalMemoryStorage instance.
            </summary>
    </member>
    <member name="M:Trinity.Storage.LocalMemoryStorage.Dispose">
      <summary>
            Release the unmanaged resources.
            </summary>
    </member>
    <member name="P:Trinity.Storage.LocalMemoryStorage.CommittedTrunkMemory">
      <summary>
            The total allocated memory pool in bytes.
            </summary>
    </member>
    <member name="P:Trinity.Storage.LocalMemoryStorage.CommittedIndexMemory">
      <summary>
            The total memory consumed by the trunk indexes.
            </summary>
    </member>
    <member name="P:Trinity.Storage.LocalMemoryStorage.TotalCommittedMemory">
      <summary>
            The total memory consumed by Trinity memory trunks.
            </summary>
    </member>
    <member name="P:Trinity.Storage.LocalMemoryStorage.TotalCellSize">
      <summary>
            The total size of cells stored in the system.
            </summary>
    </member>
    <member name="P:Trinity.Storage.LocalMemoryStorage.CellCount">
      <summary>
            Gets the total cell count in local memory storage.
            </summary>
    </member>
    <member name="T:Trinity.Storage.CellAction">
      <summary>
            Represents a cell action that takes an unsafe cell pointer as parameter.
            </summary>
      <param name="cellPtr">An unsafe cell pointer.</param>
    </member>
    <member name="T:Trinity.Storage.CellAction`1">
      <summary>
            Represents a cell action that takes an unsafe cell pointer and a cell size (int) as parameters.
            </summary>
      <param name="cellPtr">An unsafe cell pointer.</param>
      <param name="size">The size of current cell.</param>
    </member>
    <member name="T:Trinity.Storage.CellAction`2">
      <summary>
            Represents a cell action that takes an unsafe cell pointer, a cell Id (long), and a cell size (int) as parameters.
            </summary>
      <param name="cellPtr">An unsafe cell pointer.</param>
      <param name="cellId">The 64-bit cell Id of current cell.</param>
      <param name="size">The size of current cell.</param>
    </member>
    <member name="T:Trinity.Storage.CellTransformAction">
      <summary>
            Represents a cell transformation action that takes an unsafe cell pointer as parameter.
            </summary>
      <param name="cellPtr">An unsafe cell pointer.</param>
      <returns>Transformed cell blob.</returns>
    </member>
    <member name="T:Trinity.Storage.CellTransformAction`1">
      <summary>
            Represents a cell transformation action that takes an unsafe cell pointer and a cell size (int) as parameters.
            </summary>
      <param name="cellPtr">An unsafe cell pointer.</param>
      <param name="size">The size of current cell.</param>
      <returns>Transformed cell blob.</returns>
    </member>
    <member name="T:Trinity.Storage.CellTransformAction`2">
      <summary>
            Represents a cell transformation action that takes an unsafe cell pointer, a cell Id (long), and a cell size (int) as parameters.
            </summary>
      <param name="cellPtr">An unsafe cell pointer.</param>
      <param name="cellId">The 64-bit cell id of current cell.</param>
      <param name="size">The size of current cell.</param>
      <returns>Transformed cell blob.</returns>
    </member>
    <member name="T:Trinity.Storage.CellTransformAction`3">
      <summary>
            Represents a cell transformation action that takes an unsafe cell pointer, a cell Id (long), a cell size (int), and a cell type (ushort) as parameters.
            </summary>
      <param name="cellPtr">An unsafe cell pointer.</param>
      <param name="cellId">The 64-bit cell id of current cell.</param>
      <param name="size">The size of current cell.</param>
      <param name="cellType">The cell type of current cell.</param>
      <returns>Transformed cell blob.</returns>
    </member>
    <member name="T:Trinity.Storage.ICellTransformSlim">
      <summary>
            Defines a transformation method which takes an unsafe cell pointer and a cell size as parameters.
            </summary>
    </member>
    <member name="M:Trinity.Storage.ICellTransformSlim.Transform(System.Byte*,System.Int32)">
      <summary>
            Transforms a cell from one form to another.
            </summary>
      <param name="cellPtr">An unsafe cell pointer.</param>
      <param name="size">The size of current cell.</param>
      <returns>Transformed cell blob.</returns>
    </member>
    <member name="T:Trinity.Storage.ICellTransform">
      <summary>
            Defines a transformation method which takes an unsafe cell pointer, a cell Id, and a cell size as parameters.
            </summary>
    </member>
    <member name="M:Trinity.Storage.ICellTransform.Transform(System.Byte*,System.Int64,System.Int32)">
      <summary>
            Transforms a cell from one from to another.
            </summary>
      <param name="cellPtr">An unsafe cell pointer.</param>
      <param name="cellId">An 64-bit cell Id.</param>
      <param name="size">The size of current cell.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Trinity.Storage.CellNotFoundException">
      <summary>
            The exception that is thrown when a Trinity cell is not found.
            </summary>
    </member>
    <member name="M:Trinity.Storage.CellNotFoundException.#ctor">
      <summary>
            Initialize a new CellNotFoundException instance.
            </summary>
    </member>
    <member name="M:Trinity.Storage.CellNotFoundException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the CellNotFoundException class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Trinity.Storage.CellNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the CellNotFoundException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:Trinity.Storage.CellTypeNotMatchException">
      <summary>
            The exception that is thrown when the specified Trinity cell type does not match the loaded cell type.
            </summary>
    </member>
    <member name="M:Trinity.Storage.CellTypeNotMatchException.#ctor">
      <summary>
            Initialize a new CellTypeNotMatchException instance.
            </summary>
    </member>
    <member name="M:Trinity.Storage.CellTypeNotMatchException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the CellTypeNotMatchException class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Trinity.Storage.CellTypeNotMatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the CellTypeNotMatchException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:Trinity.Storage.DataTypeIncompatibleException">
      <summary>
            The exception that is thrown when attempting to apply operations on incompatible Trinity data types.
            </summary>
    </member>
    <member name="M:Trinity.Storage.DataTypeIncompatibleException.#ctor">
      <summary>
            Initialize a new DataTypeIncompatibleException instance.
            </summary>
    </member>
    <member name="M:Trinity.Storage.DataTypeIncompatibleException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the DataTypeIncompatibleException class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Trinity.Storage.DataTypeIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the DataTypeIncompatibleException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:Trinity.Network.AvailabilityGroup">
      <summary>
            Represents a Trinity availability group. A availability group consists of a set of Trinity servers that are backups of each other.
            </summary>
    </member>
    <member name="F:Trinity.Network.AvailabilityGroup.Id">
      <summary>
            The identifier of an availability group.
            </summary>
    </member>
    <member name="F:Trinity.Network.AvailabilityGroup.ServerInstances">
      <summary>
            A list of <see cref="T:Trinity.Network.ServerInfo" />, each of which represents a Trinity server.
            </summary>
    </member>
    <member name="M:Trinity.Network.AvailabilityGroup.#ctor(System.String,Trinity.Network.ServerInfo)">
      <summary>
            Initializes a new instance of <see cref="T:Trinity.Network.AvailabilityGroup" /> class with one server.
            </summary>
      <param name="id">The id of the availability group.</param>
      <param name="serverInfo">A <see cref="T:Trinity.Network.ServerInfo" /> instance containing the information of the specified server.</param>
    </member>
    <member name="M:Trinity.Network.AvailabilityGroup.#ctor(System.String,System.Collections.Generic.List{Trinity.Network.ServerInfo})">
      <summary>
            Initializes a new instance of <see cref="T:Trinity.Network.AvailabilityGroup" /> class with a set of servers.
            </summary>
      <param name="id">The id of the availability group.</param>
      <param name="replicas">A list of <see cref="T:Trinity.Network.ServerInfo" /> instances representing the replicas of the <see cref="T:Trinity.Network.AvailabilityGroup" />.</param>
    </member>
    <member name="M:Trinity.Network.AvailabilityGroup.GetStorageRootByIPE(System.Net.IPEndPoint)">
      <summary>
            Gets the storage root directory by the specified server <see cref="T:System.Net.IPEndPoint" />.
            </summary>
      <param name="ipe">A <see cref="T:System.Net.IPEndPoint" /> of the specified server.</param>
      <returns>The storage root directory of the specified server.</returns>
    </member>
    <member name="M:Trinity.Network.AvailabilityGroup.Has(System.Net.IPEndPoint)">
      <summary>
            Determines whether the current availability group contains the specified server replica.
            </summary>
      <param name="ipe">A <see cref="T:System.Net.IPEndPoint" /> of the specified server.</param>
      <returns>If the availability group contains the specified server instance, returns true; otherwise, returns false.</returns>
    </member>
    <member name="M:Trinity.Network.AvailabilityGroup.Has(System.Collections.Generic.List{System.Net.IPAddress},System.Int32)">
      <summary>
            Determines whether the current availability group contains the specified server replica.
            </summary>
      <param name="ips">A list of available <see cref="T:System.Net.IPAddress" /> instances for a given server.</param>
      <param name="port">The network port of the server.</param>
      <returns>If the availability group contains the specified server instance, returns true; otherwise, returns false.</returns>
    </member>
    <member name="M:Trinity.Network.AvailabilityGroup.HasLoopBackEndpoint(System.Int32)">
      <summary>
            Determines whether the current availability group contains a server that binds to a loopback endpoint.
            </summary>
      <param name="port">The network port of the server.</param>
      <returns>If the availability group contains the specified server instance, returns true; otherwise, returns false.</returns>
    </member>
    <member name="T:Trinity.Storage.StorageCapacityProfile">
      <summary>
            Specifies the system capacity.
            </summary>
    </member>
    <member name="F:Trinity.Storage.StorageCapacityProfile.Max256M">
      <summary>
            Maximum 256 million cells supported by each LocalStorage instance.
            </summary>
    </member>
    <member name="F:Trinity.Storage.StorageCapacityProfile.Max512M">
      <summary>
            Maximum 512 million cells supported by each LocalStorage instance.
            </summary>
    </member>
    <member name="F:Trinity.Storage.StorageCapacityProfile.Max1G">
      <summary>
            Maximum 1 billion cells supported by each LocalStorage instance.
            </summary>
    </member>
    <member name="F:Trinity.Storage.StorageCapacityProfile.Max2G">
      <summary>
            Maximum 2 billion cells supported by each LocalStorage instance.
            </summary>
    </member>
    <member name="F:Trinity.Storage.StorageCapacityProfile.Max4G">
      <summary>
            Maximum 4 billion cells supported by each LocalStorage instance.
            </summary>
    </member>
    <member name="F:Trinity.Storage.StorageCapacityProfile.Max8G">
      <summary>
            Maximum 8 billion cells supported by each LocalStorage instance.
            </summary>
    </member>
    <member name="F:Trinity.Storage.StorageCapacityProfile.Max16G">
      <summary>
            Maximum 16 billion cells supported by each LocalStorage instance.
            </summary>
    </member>
    <member name="F:Trinity.Storage.StorageCapacityProfile.Max32G">
      <summary>
            Maximum 32 billion cells supported by each LocalStorage instance.
            </summary>
    </member>
    <member name="T:Trinity.TrinityConfig">
      <summary>
            Specifies the configuration parameters of Trinity system.
            </summary>
    </member>
    <member name="M:Trinity.TrinityConfig.SetPartitionMethod(Trinity.Network.GetServerIdByCellIdDelegate)">
      <summary>
            Sets a user-defined partitioning method.
            </summary>
      <param name="getServerIdByCellIdMethod">A GetServerIdByCellIdDelegate delegate method.</param>
    </member>
    <member name="F:Trinity.TrinityConfig.Servers">
      <summary>
            Represents a list of Trinity servers.
            </summary>
    </member>
    <member name="F:Trinity.TrinityConfig.Proxies">
      <summary>
            Represents a list of Trinity proxies.
            </summary>
    </member>
    <member name="M:Trinity.TrinityConfig.AddServer(Trinity.Network.ServerInfo)">
      <summary>
            Adds a Trinity server.
            </summary>
      <param name="serverInfo">
      </param>
    </member>
    <member name="M:Trinity.TrinityConfig.AddProxy(Trinity.Network.ServerInfo)">
      <summary>
            Adds a Trinity proxy.
            </summary>
      <param name="proxy">A <see cref="T:Trinity.Network.ServerInfo" /> instance that represent a proxy.</param>
    </member>
    <member name="M:Trinity.TrinityConfig.SaveConfig">
      <summary>
            Save current configuration to the default config file trinity.xml. The default location of trinity.xml is the directory containing current Trinity assembly.
            </summary>
    </member>
    <member name="M:Trinity.TrinityConfig.SaveConfig(System.String)">
      <summary>
            Save current configuration to the specified file.
            </summary>
      <param name="configFile">The config file to which the current configuration is written to.</param>
    </member>
    <member name="M:Trinity.TrinityConfig.LoadConfig">
      <summary>
            Load configuration from the default config file trinity.xml. The default location of trinity.xml is the directory containing current Trinity assembly.
            </summary>
    </member>
    <member name="M:Trinity.TrinityConfig.LoadConfig(System.String)">
      <summary>
            Load configuration from the specified configuration file.
            </summary>
      <param name="configFile">The config file to read.</param>
    </member>
    <member name="F:Trinity.TrinityConfig.ExperimentalFeatureOn">
      <summary>
            Gets or sets the flag that indicates whether experimental features are enabled.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.LoggingLevel">
      <summary>
            Current system logging logLevel, default is LogLevel.Info.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.ReadOnly">
      <summary>
            Set readonly flag of the Trinity memory storage. The caller hereby promise that it does not modify the trinity memory storage.
            Note:
            1)	This flag should be switched on at the very beginning of your program.
            2)	Once this flag is enabled, it cannot be disabled in the current process.
            3)	The current process SHOULD NOT update/modify Trinity memory storage any more.  Operations, such as SaveCell(), AddCell(), cannot be called in this mode.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.StorageCapacity">
      <summary>
            Gets and Sets the current storage capacity profile.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.StorageRoot">
      <summary>
            Gets or sets the root data directory for current Trinity process.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.DefragInterval">
      <summary>
            Defragmentation frequency, Default Value = 600
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.AllServerInstances">
      <summary>
            Gets all the server instances.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.AllProxyInstances">
      <summary>
            GEts all the proxy instances.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.AllServerIPEndPoints">
      <summary>
            Gets a list of IPEndPoints corresponding to all the server instances.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.AllProxyIPEndPoints">
      <summary>
            Gets a list of IPEndPoints corresponding to all the proxy instances.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.ClientMaxConn">
      <summary>
            Indicates the number of network connections a Trinity client can connect to a Trinity server at most.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.ServerPort">
      <summary>
            The network port of the current Trinity server.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.HttpPort">
      <summary>
            The HTTP port of the current Trinity server/proxy
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.ProxyPort">
      <summary>
            The network port of the current Trinity proxy.
            </summary>
    </member>
    <member name="P:Trinity.TrinityConfig.CurrentRunningMode">
      <summary>
            Gets or sets the running mode of current Trinity process.
            </summary>
    </member>
    <member name="T:Trinity.Diagnostics.NamespaceDoc">
      <summary>
            The Trinity.Diagnostics namespace contains classes for logging and debugging.
            </summary>
    </member>
    <member name="T:Trinity.Network.Messaging.MessageSorter">
      <summary>
            Provides methods for partitioning messages
            </summary>
    </member>
    <member name="M:Trinity.Network.Messaging.MessageSorter.#ctor">
      <summary>
            Constructs a MessageSorter instance
            </summary>
    </member>
    <member name="M:Trinity.Network.Messaging.MessageSorter.#ctor(System.Collections.Generic.List{System.Int64})">
      <summary>
            Constructs a MessageSorter using a given cell Id list.
            </summary>
      <param name="cellIdList">A list of cell Ids.</param>
    </member>
    <member name="M:Trinity.Network.Messaging.MessageSorter.Add(System.Int64)">
      <summary>
            Adds a cellId to the sorter
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
    </member>
    <member name="M:Trinity.Network.Messaging.MessageSorter.GetCellRecipientList(System.Int32)">
      <summary>
            Get the cell id list for the specified server.
            </summary>
      <param name="serverId">The server Id.</param>
      <returns>A list of cell Ids.</returns>
    </member>
    <member name="T:Trinity.Network.Messaging.NamespaceDoc">
      <summary>
            The Trinity.Network.Messaging namespace contains utility classes for message passing.
            </summary>
    </member>
    <member name="T:Trinity.Network.NamespaceDoc">
      <summary>
            The Trinity.Network namespace contains base classes for Trinity network programming.
            </summary>
    </member>
    <member name="T:Trinity.Storage.MemoryCloud">
      <summary>
            Provides methods for interacting with Trinity key-value store over memory cloud.
            </summary>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.BuildIndex">
      <summary>
            Sends build index command to each Trinity server.
            </summary>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.Search(System.String)">
      <summary>
            Returns a array of cell Ids that matches the search pattern.
            </summary>
      <param name="pattern">A pattern string used to do the match.</param>
      <returns>A array of cell Ids for each server.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.Search(System.String,System.Int32)">
      <summary>
            Returns a array of cell Ids that matches the search pattern.
            </summary>
      <param name="pattern">A pattern string used to do the match.</param>
      <param name="max">The max number of results to return.</param>
      <returns>A array of cell Ids for each server.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.SaveStorage">
      <summary>
            Dumps memory storages to disk files on all Trinity servers.
            </summary>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.LoadStorage">
      <summary>
            Loads Trinity key-value store from disk to main memory on all Trinity servers.
            </summary>
      <returns>true if loading succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.ResetStorage">
      <summary>
            Resets local memory storage to the initial state on all Trinity servers. The content in the memory storage will be cleared. And the memory storage will be shrunk to the initial size.
            </summary>
      <returns>true if resetting succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.Ping">
      <summary>
            Used to trigger the initialization routine.
            </summary>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.Dispose">
      <summary>
            Disposes current MemoryCloud instance.
            </summary>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.Dispose(System.Boolean)">
      <summary>
            Disposes current MemoryCloud instance.
            </summary>
      <param name="disposing">This parameter is not used.</param>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.Finalize">
      <summary>
            The deconstruction method of MemoryCloud class.
            </summary>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.IsLocalCell(System.Int64)">
      <summary>
            Indicates whether the cell with the specified Id is a local cell.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <returns>true if the cell is in local storage; otherwise, false.</returns>
    </member>
    <member name="F:Trinity.Storage.MemoryCloud.StaticGetServerIdByCellId">
      <summary>
            Gets the Id of the server on which the cell with the specified cell Id is located.
            </summary>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.GetServerIdByCellId(System.Int64)">
      <summary>
            Gets the Id of the server on which the cell with the specified cell Id is located.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <returns>A Trinity server Id.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.SaveCell(System.Int64,System.Byte[])">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.SaveCell(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.SaveCell(System.Int64,System.Byte*,System.Int32)">
      <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if saving succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.LoadCell(System.Int64,System.Byte[]@)">
      <summary>
            Loads the bytes of the cell with the specified cell Id.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="cellBuff">The bytes of the cell. An empty byte array is returned if the cell is not found.</param>
      <returns>A Trinity error code. Possible values are E_SUCCESS and E_NOT_FOUND.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.LoadCell(System.Int64,System.Byte[]@,System.UInt16@)">
      <summary>
            Loads the type and the content of the cell with the specified cell Id.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="cellBuff">The bytes of the cell. An empty byte array is returned if the cell is not found.</param>
      <param name="cellType">The type of the cell, represented with a 16-bit unsigned integer.</param>
      <returns>A Trinity error code. Possible values are E_SUCCESS and E_NOT_FOUND.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.RemoveCell(System.Int64)">
      <summary>
            Removes the cell with the specified cell Id from the key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <returns>true if removing succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.GetCellType(System.Int64,System.UInt16@)">
      <summary>
            Gets the type of the cell with specified cell Id.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="cellType">The type of the cell specified by cellId.</param>
      <returns>A Trinity error code. Possible values are E_SUCCESS and E_NOT_FOUND.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.Contains(System.Int64)">
      <summary>
            Determines whether there is a cell with the specified cell Id in Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <returns>true if a cell whose Id is cellId is found; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.AddCell(System.Int64,System.Byte*,System.Int32)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.AddCell(System.Int64,System.Byte[])">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.AddCell(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Adds a new cell to the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if adding succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.UpdateCell(System.Int64,System.Byte*,System.Int32)">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if updating succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.UpdateCell(System.Int64,System.Byte[])">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <returns>true if updating succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.UpdateCell(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Updates an existing cell in the Trinity key-value store.
            </summary>
      <param name="cellId">A 64-bit cell Id.</param>
      <param name="buff">A memory buffer that contains the cell content.</param>
      <param name="offset">The byte offset into the buff.</param>
      <param name="size">The size of the cell.</param>
      <returns>true if updating succeeds; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.ShutDown(System.Int32)">
      <summary>
            Shutdown the server with the specified serverId.
            </summary>
      <param name="serverId">The id of the server.</param>
    </member>
    <member name="M:Trinity.Storage.MemoryCloud.ShutDown">
      <summary>
            Shutdown all running Trinity servers. This only works in the Client mode.
            </summary>
    </member>
    <member name="P:Trinity.Storage.MemoryCloud.ServerCount">
      <summary>
            The number of servers in the cluster.
            </summary>
    </member>
    <member name="T:Trinity.Storage.NamespaceDoc">
      <summary>
            The Trinity.Storage namespace contains classes for interacting with Trinity key-value store. 
            </summary>
    </member>
    <member name="T:Trinity.Network.ServerInfo">
      <summary>
            Contains the information for a Trinity server or proxy.
            </summary>
    </member>
    <member name="F:Trinity.Network.ServerInfo.HostName">
      <summary>
            The host name of the server or proxy.
            </summary>
    </member>
    <member name="F:Trinity.Network.ServerInfo.Port">
      <summary>
            The network port for the server or proxy.
            </summary>
    </member>
    <member name="F:Trinity.Network.ServerInfo.WorkingDirectory">
      <summary>
            The working directory of the server or proxy.
            </summary>
    </member>
    <member name="F:Trinity.Network.ServerInfo.StorageRoot">
      <summary>
            The storage root directory of the server or proxy.
            </summary>
    </member>
    <member name="F:Trinity.Network.ServerInfo.LoggingLevel">
      <summary>
            The logging level for the server or proxy.
            </summary>
    </member>
    <member name="F:Trinity.Network.ServerInfo.Id">
      <summary>
            The id of the server group that the server belongs to.
            </summary>
    </member>
    <member name="M:Trinity.Network.ServerInfo.#ctor">
      <summary>
            Initializes an empty ServerInfo instance.
            </summary>
    </member>
    <member name="M:Trinity.Network.ServerInfo.#ctor(System.String,System.Int32,System.String,Trinity.Diagnostics.LogLevel)">
      <summary>
            Initializes an ServerInfo instance with the specified hostname, port, working directory, and logging level.
            </summary>
      <param name="hostname">The host name of the server or proxy.</param>
      <param name="port">The network port for the server or proxy.</param>
      <param name="workingDir">The working directory of the server or proxy.</param>
      <param name="logLevel">The logging level for the server or proxy.</param>
    </member>
    <member name="M:Trinity.Network.ServerInfo.#ctor(System.String,System.Int32,System.String,System.String,Trinity.Diagnostics.LogLevel,System.String)">
      <summary>
            Initializes an ServerInfo instance with the specified hostname, port, working directory, and logging level.
            </summary>
      <param name="hostname">The host name of the server or proxy.</param>
      <param name="port">The network port for the server or proxy.</param>
      <param name="workingDir">The working directory of the server or proxy.</param>
      <param name="storageRoot">The storage root directory of the server or proxy.</param>
      <param name="logLevel">The logging level for the server or proxy.</param>
      <param name="id">The id of the current server.</param>
    </member>
    <member name="P:Trinity.Network.ServerInfo.EndPoint">
      <summary>
            Returns the IPEndPoint of the current Trinity server.
            </summary>
    </member>
    <member name="T:Trinity.RunningMode">
      <summary>
            Specifies the running mode supported by Trinity.
            </summary>
    </member>
    <member name="F:Trinity.RunningMode.Undefined">
      <summary>
            Undefined running mode.
            </summary>
    </member>
    <member name="F:Trinity.RunningMode.Embedded">
      <summary>
            Current process runs in embedded mode.
            </summary>
    </member>
    <member name="F:Trinity.RunningMode.Server">
      <summary>
            Current process runs as a Trinity server.
            </summary>
    </member>
    <member name="F:Trinity.RunningMode.Proxy">
      <summary>
            Current process runs as a Trinity proxy.
            </summary>
    </member>
    <member name="F:Trinity.RunningMode.Client">
      <summary>
            Current process runs as a Trinity client.
            </summary>
    </member>
    <member name="T:Trinity.Network.TrinityProxy">
      <summary>
            Represents a Trinity proxy. It is an abstract class.
            </summary>
    </member>
    <member name="M:Trinity.Network.TrinityProxy.Start(System.Boolean)">
      <summary>
            Starts a Trinity proxy instance.
            </summary>
      <param name="blocking">A flag indicating whether current thread exits or not after starting the proxy. Current thread remains alive if the value is true, otherwise current thread exits after starting the proxy.</param>
    </member>
    <member name="T:Trinity.Network.DefaultTrinityProxy">
      <summary>
            The default Trinity Proxy class.
            </summary>
    </member>
    <member name="T:Trinity.Network.TrinityServer">
      <summary>
            Represents a Trinity server. It is an abstract class.
            </summary>
    </member>
    <member name="M:Trinity.Network.TrinityServer.Start(System.Boolean)">
      <summary>
            Starts a Trinity server instance.
            </summary>
      <param name="blocking">A flag indicating whether current thread exits or not after starting the server. Current thread remains alive if the value is true, otherwise current thread exits after starting the server.</param>
    </member>
    <member name="T:Trinity.Network.DefaultTrinityServer">
      <summary>
            The vanilla built-in Trinity server.
            </summary>
    </member>
    <member name="T:Trinity.Core.Lib.BitHelper">
      <summary>
            A Helper class for manipulating blob related data structures.
            </summary>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.GetBytes(System.String)">
      <summary>
            Returns the specified string as an array of bytes.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>An array of bytes.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.GetBytesWithHeader(System.String)">
      <summary>
            Returns the specified string as an array of bytes with a header containing the string buffer length.
            </summary>
      <param name="value">The string to convert.</param>
      <returns>An array of bytes.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.WriteString(System.String,System.Byte[],System.Int32@)">
      <summary>
            Write the specified value to the specified buffer starting from the given offset.
            </summary>
      <param name="value">The string value to write.</param>
      <param name="buffer">The buffer to write the string value in.</param>
      <param name="offset">The offset of the buffer to write; the offset is added (value.Length*2) after the writing.</param>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.WriteString(System.String,System.Byte*)">
      <summary>
            Write the specified value to the specified buffer.
            </summary>
      <param name="value">The string value to write.</param>
      <param name="buffer">The buffer to write the string value in.</param>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.GetString(System.Byte[])">
      <summary>
            Gets the corresponding string from the specified buffer.
            </summary>
      <param name="buffer">The string buffer.</param>
      <returns>The corresponding string.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Gets the corresponding string from the specified buffer starting from the given position.
            </summary>
      <param name="buffer">The string buffer.</param>
      <param name="startIndex">The zero-based byte offset into the buffer.</param>
      <param name="count">The number of bytes to convert.</param>
      <returns>The corresponding string.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.GetString(System.Byte*,System.Int32)">
      <summary>
             Gets the corresponding string from the specified buffer.
            </summary>
      <param name="buffer">The string buffer.</param>
      <param name="count">The number of bytes to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.GetCharArray(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Gets the corresponding char array from the specified buffer starting from the given position.
            </summary>
      <param name="buffer">The string buffer.</param>
      <param name="startIndex">The zero-based byte offset into the buffer.</param>
      <param name="count">The number of bytes to convert.</param>
      <returns>The corresponding char array.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.WriteIPEndPoint(System.Net.IPEndPoint,System.Byte*)">
      <summary>
            Writes an IPEndPoint instance to the specified buffer.
            </summary>
      <param name="ipe">An IPEndPoint instance.</param>
      <param name="buffer">The buffer to write the ipe in.</param>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.ToIPAddress(System.Byte*,System.Int32)">
      <summary>
            Returns an IPAddress instance from eight bytes of the specified buffer.
            </summary>
      <param name="buffer">The buffer.</param>
      <param name="startIndex">A zero-based byte offset into the buffer.</param>
      <returns>An IPAddress instance.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.ToIPEndPoint(System.Byte*)">
      <summary>
            Returns an IPEndPoint instance from eight bytes of the specified buffer.
            </summary>
      <param name="buffer">The buffer.</param>
      <returns>An IPEndPoint instance.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.ToInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes</param>
      <param name="startIndex">The starting position within the byte array.</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.ToBoolean(System.Byte[],System.Int32)">
      <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <param name="startIndex">The starting position within the byte of array.</param>
      <returns>true if the byte at startIndex in the byte array is nonzero; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.ToUInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
      <param name="buffer">The array of bytes.</param>
      <param name="startIndex">The starting position within the byte array.</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.ToInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
      <param name="buffer">The array of bytes.</param>
      <param name="startIndex">The starting position within the byte array.</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.ToInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
      <param name="buffer">The array of bytes.</param>
      <param name="startIndex">The starting position within the byte array.</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.GetBytes(System.Decimal)">
      <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
      <param name="value">The decimal number to convert.</param>
      <returns>An array of bytes with length 16.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.WriteDecimal(System.Decimal,System.Byte[],System.Int32@)">
      <summary>
            Writes the specified decimal value to the specified buffer starting from the specified offset.
            </summary>
      <param name="value">The decimal value.</param>
      <param name="buffer">The memory buffer.</param>
      <param name="offset">The zero-based byte offset into the buffer; the offset is added 16 bytes after the writing.</param>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.GetDecimal(System.Byte[],System.Int32)">
      <summary>
            Returns a decimal value converted from 16 bytes at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <param name="startIndex">The starting position within the buffer.</param>
      <returns>A decimal value.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.BitHelper.HammingDistance(System.UInt64*,System.UInt64*,System.Int32)">
      <summary>
            Returns the Hamming distance of the two specified ulong array buffer.
            </summary>
      <param name="arrayA">The first ulong array buffer.</param>
      <param name="arrayB">The second ulong array buffer.</param>
      <param name="size">The number of ulong elements to compare.</param>
      <returns>The hamming distance between the two ulong array.</returns>
    </member>
    <member name="T:Trinity.Global">
      <summary>
            Provides global information about the running Trinity system. Provides methods to reset and safely exit Trinity system. This class cannot be inherited.
            </summary>
    </member>
    <member name="M:Trinity.Global.Exit">
      <summary>
            Safely exit current Trinity instance. Logs will be flushed before exiting.
            </summary>
    </member>
    <member name="M:Trinity.Global.Exit(System.Int32)">
      <summary>
            Safely exit current Trinity instance. Logs will be flushed before exiting.
            </summary>
      <param name="exitCode">Exit code to be given to the operating system.</param>
    </member>
    <member name="M:Trinity.Global.GetTotalMemoryUsage">
      <summary>
            Gets the total memory usage of all Trinity servers.
            </summary>
      <returns>Working set size in bytes.</returns>
    </member>
    <member name="P:Trinity.Global.ServerCount">
      <summary>
            Gets the number of servers in current Trinity cluster.
            </summary>
    </member>
    <member name="P:Trinity.Global.ProxyCount">
      <summary>
            Gets the number of proxies in current Trinity cluster.
            </summary>
    </member>
    <member name="P:Trinity.Global.MyServerID">
      <summary>
            Gets the ID of current server instance in the cluster.
            </summary>
    </member>
    <member name="P:Trinity.Global.MyProxyID">
      <summary>
            Gets the ID of current proxy instance in the cluster.
            </summary>
    </member>
    <member name="P:Trinity.Global.CloudStorage">
      <summary>
            Represents the memory cloud storage. Contains methods to access, manipulate cells in the memory cloud. Contains methods to send messages to other Trinity servers.
            </summary>
    </member>
    <member name="P:Trinity.Global.LocalStorage">
      <summary>
            Represents the local memory storage. Contains methods to access, manipulate cells in the local memory storage. Contains methods to send loopback messages.
            </summary>
    </member>
    <member name="P:Trinity.Global.MyAssemblyPath">
      <summary>
            Gets the path or UNC location of the running Trinity instance.
            </summary>
    </member>
    <member name="P:Trinity.Global.MyIPAddress">
      <summary>
            Gets the IPAddress bound to current Trinity server.
            </summary>
    </member>
    <member name="P:Trinity.Global.MyIPAddresses">
      <summary>
            Gets all the IPAddresses bound to current Trinity server.
            </summary>
    </member>
    <member name="P:Trinity.Global.MyIPEndPoint">
      <summary>
            Gets the IPEndPoint bound to current Trinity instance.
            </summary>
    </member>
    <member name="P:Trinity.Global.MyProxyIPEndPoint">
      <summary>
            Gets the IPEndPoint bound to current Trinity proxy.
            </summary>
    </member>
    <member name="T:Trinity.Core.Lib.HashHelper">
      <summary>
            A helper class for various hash functions.
            </summary>
    </member>
    <member name="M:Trinity.Core.Lib.HashHelper.HashString2Int64(System.String)">
      <summary>
            Gets a 64-bit signed integer hash code of the specified string.
            </summary>
      <param name="value">The string value.</param>
      <returns>A 64-bit signed integer hash code.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.HashHelper.HashBytes(System.Byte[])">
      <summary>
            Gets the hash code of the byte array.
            </summary>
      <param name="buffer">The array of bytes.</param>
      <returns>The hash code.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.HashHelper.HashBytes(System.Byte*,System.Int32)">
      <summary>
            Gets the hash code of the memory buffer.
            </summary>
      <param name="buffer">The memory buffer.</param>
      <param name="count">The number of bytes to access.</param>
      <returns>The hash code.</returns>
    </member>
    <member name="T:Trinity.Core.Lib.CellIDFactory">
      <summary>
            Generates random 64-bit cell id.
            </summary>
    </member>
    <member name="M:Trinity.Core.Lib.CellIDFactory.NewCellID">
      <summary>
            Generates a new random 64-bit cell id.
            </summary>
      <returns>A new 64-bit cell id.</returns>
      <remarks>This is a thread-safe method that you can call to get a new cell id.</remarks>
    </member>
    <member name="M:Trinity.Core.Lib.CellIDFactory.NextSequentialCellID">
      <summary>
            Generates a sequentially incremented 64-bit cell id.
            </summary>
      <returns>A new 64-bit cell id.</returns>
      <remarks>This is a thread-safe method that you can call to get a new cell id.</remarks>
    </member>
    <member name="T:Trinity.Core.Lib.Memory">
      <summary>
            Provides methods to manipulate memory.
            </summary>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.memmove(System.Void*,System.Void*,System.UInt64)">
      <summary>
            C-style memmove. Copies a specified number of bytes from a source buffer to a destination buffer. 
            If some regions of the source and destination buffer overlap, the bytes of the overlapping region are copied before being overwritten.
            </summary>
      <param name="dst">The destination buffer.</param>
      <param name="src">The source buffer.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.memcpy(System.Void*,System.Void*,System.UInt64)">
      <summary>
            C-style memcpy. Copies a specified number of bytes from a source buffer to a destination buffer.
            </summary>
      <param name="dst">The destination buffer.</param>
      <param name="src">The source buffer.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.memcmp(System.Void*,System.Void*,System.UInt64)">
      <summary>
            C-style memcmp. Compares the specified number of bytes in two buffers and returns a value indicating their relationship.
            </summary>
      <param name="ptr1">Pointer to the first buffer.</param>
      <param name="ptr2">Pointer to the second buffer.</param>
      <param name="count">The number of bytes to compare.</param>
      <returns>Zero indicates the bytes of two buffers are identical. A value less than zero indicates the first buffer less than the second. Otherwise, a value great than zero is returned.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.memset(System.Void*,System.Int32,System.UInt64)">
      <summary>
            C-style memset. Sets the specified number of bytes in a buffer to the specified value.
            </summary>
      <param name="buff">Pointer to memory buffer.</param>
      <param name="value">Value to set.</param>
      <param name="count">The number of bytes to set.</param>
      <returns>The pointer of memory buffer is returned.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.realloc(System.Void*,System.UInt64)">
      <summary>
            C-style realloc. Reallocate a previously allocated memory buffer. The content of the memory buffer is preserved up to the shorter of the old and new buffer. The expanded portion of the new buffer is indeterminate. If size is zero, the previously allocated buffer is freed, NULL is returned. If buff is NULL, it behaves the same way as malloc.
            </summary>
      <param name="buff">Pointer to a previously allocated memory buffer.</param>
      <param name="size">Number of bytes of the reallocated memory buffer.</param>
      <returns>A pointer to the reallocated memory buffer.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.malloc(System.UInt64)">
      <summary>
            C-style malloc. Allocates specified number of bytes of memory.
            </summary>
      <param name="size">Number of bytes to allocate.</param>
      <returns>Pointer to the allocated memory buffer. A NULL pointer is returned if there is insufficient memory available. </returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.free(System.Void*)">
      <summary>
            C-style free. Deallocate a previously allocated memory buffer. 
            If buff is NULL, the pointer is ignored and free immediately returns. 
            </summary>
      <param name="buff">Pointer to a previously allocated memory buffer.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory._aligned_malloc(System.UInt64,System.UInt64)">
      <summary>
            C-style _aligned_malloc. Allocates memory on a specified alignment boundary.
            </summary>
      <param name="size">Size of the requested memory allocation.</param>
      <param name="alignment">The alignment value, which must be an integer power of 2.</param>
      <returns>A pointer to the memory block that was allocated or NULL if the operation failed. The pointer is a multiple of alignment.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory._aligned_malloc(System.Int64,System.Int64)">
      <summary>
            C-style _aligned_malloc. Allocates memory on a specified alignment boundary.
            </summary>
      <param name="size">Size of the requested memory allocation.</param>
      <param name="alignment">The alignment value, which must be an integer power of 2.</param>
      <returns>A pointer to the memory block that was allocated or NULL if the operation failed. The pointer is a multiple of alignment.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory._aligned_free(System.Void*)">
      <summary>
            C-style _aligned_free. Frees a block of memory that was allocated with _aligned_malloc or _aligned_offset_malloc.
            </summary>
      <param name="mem">A pointer to the memory block that was returned to the _aligned_malloc or _aligned_offset_malloc function.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.AlignedAlloc(System.Int64,System.Int64)">
      <summary>
            Aligned memory allocation. Compared with _aligned_malloc, this method zeros out the allocated memory. The size must be 8x bytes.
            </summary>
      <param name="size">Size of the requested memory allocation.</param>
      <param name="alignment">The alignment value, which must be an integer power of 2.</param>
      <returns>A pointer to the memory block that was allocated or NULL if the operation failed. The pointer is a multiple of alignment.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Compare(System.Byte*,System.Byte*,System.Int32)">
      <summary>
            Compare bytes in two buffers.
            </summary>
      <param name="buff1">First buffer.</param>
      <param name="buff2">Second buffer.</param>
      <param name="count">Number of bytes to compare.</param>
      <returns>true if buff1 identical to buff2, otherwise false.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Compare(System.Byte[],System.Byte[])">
      <summary>
            Compare bytes in two buffers.
            </summary>
      <param name="buff1">First buffer.</param>
      <param name="buff2">Second buffer.</param>
      <returns>true if buff1 identical to buff2, otherwise false.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Compare(System.Byte[],System.Byte[],System.Int32)">
      <summary>
            Compare bytes in two buffers.
            </summary>
      <param name="buff1">First buffer.</param>
      <param name="buff2">Second buffer.</param>
      <param name="count">Number of bytes to compare.</param>
      <returns>true if buff1 identical to buff2, otherwise false.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Compare(System.Byte*,System.Byte[])">
      <summary>
            Compare bytes in two buffers.
            </summary>
      <param name="buff1">First buffer.</param>
      <param name="buff2">Second buffer.</param>
      <returns>true if buff1 identical to buff2, otherwise false.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Compare(System.Byte[],System.Byte*)">
      <summary>
            Compare bytes in two buffers.
            </summary>
      <param name="buff1">First buffer.</param>
      <param name="buff2">Second buffer.</param>
      <returns>true if buff1 identical to buff2, otherwise false.</returns>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Void*,System.Void*,System.Int32)">
      <summary>
            Copies a specified number of bytes from a source buffer to a destination buffer.
            </summary>
      <param name="src">The source buffer.</param>
      <param name="dst">The destination buffer.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Byte[],System.Void*,System.Int32)">
      <summary>
            Copies a specified number of bytes from a source buffer to a destination buffer.
            </summary>
      <param name="src">The source buffer.</param>
      <param name="dst">The destination buffer.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Void*,System.Int32,System.Void*,System.Int32,System.Int32)">
      <summary>
            Copies a specified number of bytes from a source buffer starting at a particular offset to a destination buffer starting at a particular offset.
            </summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The byte offset into ptr2.</param>
      <param name="dst">The destination buffer.</param>
      <param name="dstOffset">The byte offset into ptr1.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Byte[],System.Int32,System.Void*,System.Int32)">
      <summary>
            Copies a specified number of bytes from a source buffer starting at a particular offset to a destination buffer.
            </summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The byte offset into ptr2.</param>
      <param name="dst">The destination buffer.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Byte[],System.Int32,System.Void*,System.Int32,System.Int32)">
      <summary>
            Copies a specified number of bytes from a source buffer starting at a particular offset to a destination buffer starting at a particular offset.
            </summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The byte offset into ptr2.</param>
      <param name="dst">The destination buffer.</param>
      <param name="dstOffset">The byte offset into ptr1.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Void*,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Copies a specified number of bytes from a source buffer starting at a particular offset to a destination buffer starting at a particular offset.
            </summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The byte offset into ptr2.</param>
      <param name="dst">The destination buffer.</param>
      <param name="dstOffset">The byte offset into ptr1.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Copies a specified number of bytes from a source buffer starting at a particular offset to a destination buffer starting at a particular offset.
            </summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The byte offset into ptr2.</param>
      <param name="dst">The destination buffer.</param>
      <param name="dstOffset">The byte offset into ptr1.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Byte[],System.Int32,System.Int64[],System.Int32,System.Int32)">
      <summary>
            Copies a specified number of bytes from a source buffer starting at a particular offset to a destination buffer starting at a particular offset.
            </summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The byte offset into ptr2.</param>
      <param name="dst">The destination buffer.</param>
      <param name="dstOffset">The byte offset into ptr1.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Int64[],System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Copies a specified number of bytes from an array of 64-bit integer starting at a particular offset to a destination buffer starting at a particular offset.
            </summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The byte offset into ptr2.</param>
      <param name="dst">The destination buffer.</param>
      <param name="dstOffset">The byte offset into ptr1.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Double[],System.Int32,System.Void*,System.Int32)">
      <summary>
            Copies a specified number of bytes from an array of 64-bit double starting at a particular offset to a destination buffer.
            </summary>
      <param name="src">The source buffer.</param>
      <param name="srcOffset">The byte offset into source array of double values.</param>
      <param name="dst">The destination buffer.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Void*,System.Double[],System.Int32,System.Int32)">
      <summary>
            Copies a specified number of bytes from a source buffer to an array of 64-bit double starting at a particular offset.
            </summary>
      <param name="src">The source buffer.</param>
      <param name="dst">The destination buffer.</param>
      <param name="dstOffset">The byte offset into the destination array of double values.</param>
      <param name="count">The number of bytes to copy.</param>
    </member>
    <member name="M:Trinity.Core.Lib.Memory.Copy(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
      <summary>
            Copies a specified number of bytes from an array of 64-bit double starting at a particular offset to a destination buffer starting at a particular offset.
            </summary>
      <param name="src">The source array of double values.</param>
      <param name="srcOffset">The offset into the source array.</param>
      <param name="dst">The destination array of double values.</param>
      <param name="dstOffset">THe offset into the destination array.</param>
      <param name="count">Note: The number of double values.</param>
    </member>
    <member name="T:Trinity.Core.Lib.SpinLockInt32">
      <summary>
            Represents a mutual exclusive spinlock.
            </summary>
    </member>
    <member name="M:Trinity.Core.Lib.SpinLockInt32.GetLock(System.Int32@)">
      <summary>
            Acquires the lock.
            </summary>
      <param name="spinlock">A 32-bit integer that represents the spinlock.</param>
    </member>
    <member name="M:Trinity.Core.Lib.SpinLockInt32.GetLock_Aggressive(System.Int32@)">
      <summary>
            Accquires the lock in an aggressive manner.
            </summary>
      <param name="spinlock">A 32-bit integer that represents the spinlock.</param>
    </member>
    <member name="M:Trinity.Core.Lib.SpinLockInt32.TryGetLock(System.Int32@)">
      <summary>
            Attempts to acquire the lock.
            </summary>
      <param name="spinlock">A 32-bit integer that represents the spinlock.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Trinity.Core.Lib.SpinLockInt32.TryGetLock(System.Int32@,System.Int32)">
      <summary>
            Attempts to acquire the lock at most <paramref name="retry" /> times.
            </summary>
      <param name="spinlock">A 32-bit integer that represents the spinlock.</param>
      <param name="retry">A integer that indicates the max retry times.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Trinity.Core.Lib.SpinLockInt32.ReleaseLock(System.Int32@)">
      <summary>
            Release the lock.
            </summary>
      <param name="spinlock">A 32-bit integer that represents the spinlock.</param>
    </member>
    <member name="T:Trinity.NamespaceDoc">
      <summary>
            The Trinity namespace contains classes for accessing global information of Trinity system, classes for configuring Trinity system and fundamental utility classes.
            </summary>
    </member>
    <member name="T:Trinity.TrinityErrorCode">
      <summary>
            Represents the collection of Trinity error code.
            </summary>
    </member>
    <member name="F:Trinity.TrinityErrorCode.E_INVALID_ARGUMENTS">
      <summary>
            Indicates invalid arguments when calling a method.
            </summary>
    </member>
    <member name="F:Trinity.TrinityErrorCode.E_CELL_TYPE_NOT_ENABLED">
      <summary>
            Indicates the cell type feature is not enabled.
            </summary>
    </member>
    <member name="F:Trinity.TrinityErrorCode.E_WRONG_CELL_TYPE">
      <summary>
            Represents an error when the expected cell type mismatches the existing one in the system.
            </summary>
    </member>
    <member name="F:Trinity.TrinityErrorCode.E_NETWORK_SEND_FAILURE">
      <summary>
            Represents network sending failure.
            </summary>
    </member>
    <member name="F:Trinity.TrinityErrorCode.E_NO_FREE_ENTRY">
      <summary>
            Represents an error when no free memory slot is available when adding a new cell to the system.
            </summary>
    </member>
    <member name="F:Trinity.TrinityErrorCode.E_DUPLICATED_CELL">
      <summary>
            Represents an error occurred when a duplicate cell is found when adding a new cell to the system.
            </summary>
    </member>
    <member name="F:Trinity.TrinityErrorCode.E_RETRY">
      <summary>
            Represents a temporary failure of a system operation. The failed operation should be retried.
            </summary>
    </member>
    <member name="F:Trinity.TrinityErrorCode.E_CELL_NOT_FOUND">
      <summary>
            Represents an error of not finding a cell.
            </summary>
    </member>
    <member name="F:Trinity.TrinityErrorCode.E_FAILURE">
      <summary>
            Represents a general failure.
            </summary>
    </member>
    <member name="F:Trinity.TrinityErrorCode.E_SUCCESS">
      <summary>
            Represents a general success status.
            </summary>
    </member>
    <member name="F:Trinity.TrinityErrorCode.E_CELL_FOUND">
      <summary>
            Represents a status that an expected cell is found.
            </summary>
    </member>
    <member name="T:Trinity.TSL.Lib.StringAccessor">
      <summary>
            Represents a TSL string corresponding to a string instance.
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.ToString">
      <summary>
            Returns this instance of String
            </summary>
      <returns>The current string.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.ToByteArray">
      <summary>
            Copies the elements to a new byte array
            </summary>
      <returns>Elements compactly arranged in a byte array.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.Contains(System.String)">
      <summary>
            Returns a value indicating whether the given substring occurs within the string.
            </summary>
      <param name="substring">The string to seek.</param>
      <returns>true if the value parameter occurs within this string, or if value is 
                     the empty string (""); otherwise, false.
            </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.ForEach(System.Action{System.Char})">
      <summary>
            Performs the specified action on each char
            </summary>
      <param name="action">A lambda expression which has one parameter indicates char in string</param>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.ForEach(System.Action{System.Char,System.Int32})">
      <summary>
            Performs the specified action on each char
            </summary>
      <param name="action">A lambda expression which has two parameters. First indicates char in the string and second the index of this char.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.GetEnumerator">
      <summary>
            Returns an enumerator that iterate through current string.
            </summary>
      <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.op_Implicit(Trinity.TSL.Lib.StringAccessor)~System.String">
      <summary>
            Implicitly converts a StringAccessor instance to a string instance.
            </summary>
      <param name="accessor">The StringAccessor instance.</param>
      <returns>A string instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.op_Implicit(System.String)~Trinity.TSL.Lib.StringAccessor">
      <summary>
            Implicitly converts a string instance to a BlogString instance.
            </summary>
      <param name="value">The string instance.</param>
      <returns>The StringAccessor instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.op_Equality(Trinity.TSL.Lib.StringAccessor,Trinity.TSL.Lib.StringAccessor)">
      <summary>
            Determines whether two specified StringAccessor have the same value.
            </summary>
      <param name="a">The first StringAccessor to compare, or null. </param>
      <param name="b">The second StringAccessor to compare, or null. </param>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.op_Equality(Trinity.TSL.Lib.StringAccessor,System.String)">
      <summary>
            Determines whether the specified StringAccessor and string have the same value.
            </summary>
      <param name="a">The StringAccessor to compare, or null. </param>
      <param name="b">The string to compare, or null. </param>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.op_Inequality(Trinity.TSL.Lib.StringAccessor,System.String)">
      <summary>Determines whether the specified StringAccessor and string have different values.</summary>
      <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The StringAccessor to compare, or null. </param>
      <param name="b">The String to compare, or null. </param>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.Equals(System.Object)">
      <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
      <param name="obj">The StringAccessor to compare to this instance.</param>
      <returns>true if obj is a StringAccessor and its value is the same as this instance; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.GetHashCode">
      <summary>Returns the hash code for this StringAccessor.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.StringAccessor.op_Inequality(Trinity.TSL.Lib.StringAccessor,Trinity.TSL.Lib.StringAccessor)">
      <summary>Determines whether the two specified StringAccessor have different values.</summary>
      <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The first StringAccessor to compare, or null. </param>
      <param name="b">The second StringAccessor to compare, or null. </param>
    </member>
    <member name="P:Trinity.TSL.Lib.StringAccessor.Length">
      <summary>
            Gets the number of characters in the current String object.
            </summary>
    </member>
    <member name="P:Trinity.TSL.Lib.StringAccessor.Item(System.Int32)">
      <summary>
            Gets the Char object at a specified position in the current String object.
            </summary>
      <param name="index">A position in the current string. </param>
      <returns>The object at position index.</returns>
    </member>
    <member name="T:Trinity.TSL.Lib.byteListAccessor">
      <summary>
            Represents a Trinity TSL type corresponding to List{byte}.
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.ToByteArray">
      <summary>
            Copies the elements to a new byte array
            </summary>
      <returns>Elements compactly arranged in a byte array.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.ForEach(System.Action{System.Byte})">
      <summary>
            Performs the specified action on each elements
            </summary>
      <param name="action">A lambda expression which has one parameter indicates element in List</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.ForEach(System.Action{System.Byte,System.Int32})">
      <summary>
            Performs the specified action on each elements
            </summary>
      <param name="action">A lambda expression which has two parameters. First indicates element in the List and second the index of this element.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.GetEnumerator">
      <summary>
            Returns an enumerator that iterate through current list.
            </summary>
      <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.Add(System.Byte)">
      <summary>
            Adds an item to the end of the List
            </summary>
      <param name="element">The object to be added to the end of the List.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.Insert(System.Int32,System.Byte)">
      <summary>
            Inserts an element into the List at the specified index.
            </summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="element">The object to insert.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.Insert(System.Byte,System.Comparison{System.Byte})">
      <summary>
            Inserts an element into the sorted List using the specified Comparison delegate.
            </summary>
      <param name="element">The element to insert.</param>
      <param name="comparison">The Comparison delegate.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the List.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.AddRange(System.Collections.Generic.List{System.Byte})">
      <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
      <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.AddRange(Trinity.TSL.Lib.byteListAccessor)">
      <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
      <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.Clear">
      <summary>
            Removes all elements from the List
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.Contains(System.Byte)">
      <summary>
            Determines whether an element is in the List
            </summary>
      <param name="item">The object to locate in the List.The value can be null for non-atom types</param>
      <returns>true if item is found in the List; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.Exists(System.Predicate{System.Byte})">
      <summary>
            Determines whether the List contains elements that match the conditions defined by the specified predicate.
            </summary>
      <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
      <returns>true if the List contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.CopyTo(System.Byte[])">
      <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the beginning of the ptr1 array.
            </summary>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.CopyTo(System.Byte[],System.Int32)">
      <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.CopyTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Copies a range of elements from the List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
      <param name="index">The zero-based index in the source List at which copying begins.</param>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>;
            <param name="count">The number of elements to copy.</param></member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.InsertRange(System.Int32,System.Collections.Generic.List{System.Byte})">
      <summary>
            Inserts the elements of a collection into the List at the specified index.
            </summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from the List.
            </summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.op_Implicit(Trinity.TSL.Lib.byteListAccessor)~System.Collections.Generic.List{System.Byte}">
      <summary>
            Implicitly casts a byteList to List{byte}.
            </summary>
      <param name="accessor">A byteList instance.</param>
      <returns>A List{byte} instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.op_Implicit(System.Collections.Generic.List{System.Byte})~Trinity.TSL.Lib.byteListAccessor">
      <summary>
            Implicitly casts a List{byte} instance to byteList.
            </summary>
      <param name="value">The List{byte} instance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.op_Implicit(System.Byte[])~Trinity.TSL.Lib.byteListAccessor">
      <summary>
            Implicitly convert a byte array to a byteList instance.
            </summary>
      <param name="value">The array of bytes.</param>
      <returns>A byteList instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.op_Equality(Trinity.TSL.Lib.byteListAccessor,Trinity.TSL.Lib.byteListAccessor)">
      <summary>
            Determines whether two specified byteList have the same value.
            </summary>
      <param name="a">The first byteList to compare, or null. </param>
      <param name="b">The second byteList to compare, or null. </param>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.op_Inequality(Trinity.TSL.Lib.byteListAccessor,Trinity.TSL.Lib.byteListAccessor)">
      <summary>Determines whether two specified byteList have different values.</summary>
      <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The first byteList to compare, or null. </param>
      <param name="b">The second byteList to compare, or null. </param>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.Equals(System.Object)">
      <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
      <param name="obj">The byteList to compare to this instance.</param>
      <returns>true if obj is a byteList and its value is the same as this instance; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.byteListAccessor.GetHashCode">
      <summary>
            Returns the hash code for this byteList.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:Trinity.TSL.Lib.byteListAccessor.Count">
      <summary>
            Gets the number of elements actually contained in the List. 
            </summary>
    </member>
    <member name="P:Trinity.TSL.Lib.byteListAccessor.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">Given index</param>
      <returns>Corresponding element at the specified index</returns>
    </member>
    <member name="T:Trinity.TSL.Lib.CellAccessOptions">
      <summary>
            Option flags for cell access actions.
            </summary>
    </member>
    <member name="F:Trinity.TSL.Lib.CellAccessOptions.ThrowExceptionOnCellNotFound">
      <summary>
            Throws an exception when a cell is not found.
            </summary>
    </member>
    <member name="F:Trinity.TSL.Lib.CellAccessOptions.ReturnNullOnCellNotFound">
      <summary>
            Returns null when a cell is not found.
            </summary>
    </member>
    <member name="F:Trinity.TSL.Lib.CellAccessOptions.CreateNewOnCellNotFound">
      <summary>
            Creates a new cell when a cell is not found.
            </summary>
    </member>
    <member name="F:Trinity.TSL.Lib.CellAccessOptions.StrongLogAhead">
      <summary>
            Specifies that write-ahead-log should be performed with strong durability.
            </summary>
    </member>
    <member name="F:Trinity.TSL.Lib.CellAccessOptions.WeakLogAhead">
      <summary>
            Specifies that write-ahead-log should be performed with weak durability. This option brings better performance,
            but the durability may be degraded when this option is used.
            </summary>
    </member>
    <member name="T:Trinity.TSL.Lib.doubleListAccessor">
      <summary>
            Represents a TSL double list corresponding to List{double}.
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.ToByteArray">
      <summary>
            Copies the elements to a new byte array
            </summary>
      <returns>Elements compactly arranged in a byte array.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.ToArray">
      <summary>
            Copies the elements to a new double array.
            </summary>
      <returns>An array of double.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.ForEach(System.Action{System.Double})">
      <summary>
            Performs the specified action on each elements
            </summary>
      <param name="action">A lambda expression which has one parameter indicates element in List</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.ForEach(System.Action{System.Double,System.Int32})">
      <summary>
            Performs the specified action on each elements
            </summary>
      <param name="action">A lambda expression which has two parameters. First indicates element in the List and second the index of this element.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.GetEnumerator">
      <summary>
            Returns an enumerator that iterate through current list.
            </summary>
      <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.Add(System.Double)">
      <summary>
            Adds an item to the end of the List
            </summary>
      <param name="element">The object to be added to the end of the List.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.Insert(System.Int32,System.Double)">
      <summary>
            Inserts an element into the List at the specified index.
            </summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="element">The object to insert.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.Insert(System.Double,System.Comparison{System.Double})">
      <summary>
            Inserts an element into the sorted List using the specified Comparison delegate.
            </summary>
      <param name="element">The element to insert.</param>
      <param name="comparison">The Comparison delegate.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the List.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.AddRange(System.Collections.Generic.List{System.Double})">
      <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
      <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.AddRange(System.Double[])">
      <summary>
            Adds the array of double elements to the end of the List.
            </summary>
      <param name="collection">The array of double elements.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.AddRange(System.Double[],System.Int32,System.Int32)">
      <summary>
            Adds the array of double elements to the end of the List starting from the specified index.
            </summary>
      <param name="collection">The array of double elements.</param>
      <param name="startIndex">The start position of the double array from which we copy the elements.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.AddRange(Trinity.TSL.Lib.doubleListAccessor)">
      <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
      <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.Clear">
      <summary>
            Removes all elements from the List
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.Contains(System.Double)">
      <summary>
            Determines whether an element is in the List
            </summary>
      <param name="item">The object to locate in the List.The value can be null for non-atom types</param>
      <returns>true if item is found in the List; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.Exists(System.Predicate{System.Double})">
      <summary>
            Determines whether the List contains elements that match the conditions defined by the specified predicate.
            </summary>
      <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
      <returns>true if the List contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.CopyTo(System.Double[])">
      <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the beginning of the ptr1 array.
            </summary>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.CopyTo(System.Double[],System.Int32)">
      <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.CopyTo(System.Int32,System.Double[],System.Int32,System.Int32)">
      <summary>
            Copies a range of elements from the List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
      <param name="index">The zero-based index in the source List at which copying begins.</param>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>;
            <param name="count">The number of elements to copy.</param></member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.InsertRange(System.Int32,System.Collections.Generic.List{System.Double})">
      <summary>
            Inserts the elements of a collection into the List at the specified index.
            </summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from the List.
            </summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.op_Implicit(Trinity.TSL.Lib.doubleListAccessor)~System.Collections.Generic.List{System.Double}">
      <summary>
            Implicitly converts a doubleList instance to a List{double} instance.
            </summary>
      <param name="accessor">The doubleList instance.</param>
      <returns>The List{double} instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.op_Implicit(System.Collections.Generic.List{System.Double})~Trinity.TSL.Lib.doubleListAccessor">
      <summary>
            Implicitly converts a List{double} instance to a doubleList instance.
            </summary>
      <param name="value">The List{double} instance.</param>
      <returns>The doubleList instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.op_Equality(Trinity.TSL.Lib.doubleListAccessor,Trinity.TSL.Lib.doubleListAccessor)">
      <summary>
            Determines whether two specified doubleList have the same value.
            </summary>
      <param name="a">The first doubleList to compare, or null. </param>
      <param name="b">The second doubleList to compare, or null. </param>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.op_Inequality(Trinity.TSL.Lib.doubleListAccessor,Trinity.TSL.Lib.doubleListAccessor)">
      <summary>Determines whether two specified doubleList have different values.</summary>
      <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The first doubleList to compare, or null. </param>
      <param name="b">The second doubleList to compare, or null. </param>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.Equals(System.Object)">
      <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
      <param name="obj">The doubleList to compare to this instance.</param>
      <returns>true if <paramref name="obj" /> is a doubleList and its value is the same as this instance; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.doubleListAccessor.GetHashCode">
      <summary>
            Return the hash code for this doubleList.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:Trinity.TSL.Lib.doubleListAccessor.Count">
      <summary>
            Gets the number of double elements actually contained in the List. 
            </summary>
    </member>
    <member name="P:Trinity.TSL.Lib.doubleListAccessor.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">Given index</param>
      <returns>Corresponding element at the specified index</returns>
    </member>
    <member name="T:Trinity.TSL.Lib.intListAccessor">
      <summary>
            Represents a TSL double list corresponding to List{double}.
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.ToByteArray">
      <summary>
            Copies the elements to a new byte array
            </summary>
      <returns>Elements compactly arranged in a byte array.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.ForEach(System.Action{System.Int32})">
      <summary>
            Performs the specified action on each elements
            </summary>
      <param name="action">A lambda expression which has one parameter indicates element in List</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.ForEach(System.Action{System.Int32,System.Int32})">
      <summary>
            Performs the specified action on each elements
            </summary>
      <param name="action">A lambda expression which has two parameters. First indicates element in the List and second the index of this element.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.GetEnumerator">
      <summary>
            Returns an enumerator that iterate through current list.
            </summary>
      <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.Add(System.Int32)">
      <summary>
            Adds an item to the end of the List
            </summary>
      <param name="element">The object to be added to the end of the List.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.Insert(System.Int32,System.Int32)">
      <summary>
            Inserts an element into the List at the specified index.
            </summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="element">The object to insert.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.Insert(System.Int32,System.Comparison{System.Int32})">
      <summary>
            Inserts an element into the sorted List using the specified Comparison delegate.
            </summary>
      <param name="element">The element to insert.</param>
      <param name="comparison">The Comparison delegate.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the List.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.AddRange(System.Collections.Generic.List{System.Int32})">
      <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
      <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.AddRange(Trinity.TSL.Lib.intListAccessor)">
      <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
      <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.Clear">
      <summary>
            Removes all elements from the List
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.Contains(System.Int32)">
      <summary>
            Determines whether an element is in the List
            </summary>
      <param name="item">The object to locate in the List.The value can be null for non-atom types</param>
      <returns>true if item is found in the List; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.Exists(System.Predicate{System.Int32})">
      <summary>
            Determines whether the List contains elements that match the conditions defined by the specified predicate.
            </summary>
      <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
      <returns>true if the List contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.CopyTo(System.Int32[])">
      <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the beginning of the ptr1 array.
            </summary>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.CopyTo(System.Int32[],System.Int32)">
      <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.CopyTo(System.Int32,System.Int32[],System.Int32,System.Int32)">
      <summary>
            Copies a range of elements from the List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
      <param name="index">The zero-based index in the source List at which copying begins.</param>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>;
            <param name="count">The number of elements to copy.</param></member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.InsertRange(System.Int32,System.Collections.Generic.List{System.Int32})">
      <summary>
            Inserts the elements of a collection into the List at the specified index.
            </summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from the List.
            </summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.op_Implicit(Trinity.TSL.Lib.intListAccessor)~System.Collections.Generic.List{System.Int32}">
      <summary>
            Implicitly converts an intList instance to a List{int} instance.
            </summary>
      <param name="accessor">The intList instance.</param>
      <returns>A List{int} instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.op_Implicit(System.Collections.Generic.List{System.Int32})~Trinity.TSL.Lib.intListAccessor">
      <summary>
            Implicitly converts a List{int} instance to an intList instance.
            </summary>
      <param name="value">The List{int} instance.</param>
      <returns>An intList instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.op_Equality(Trinity.TSL.Lib.intListAccessor,Trinity.TSL.Lib.intListAccessor)">
      <summary>
            Determines whether two specified intList have the same value.
            </summary>
      <param name="a">The first intList to compare, or null. </param>
      <param name="b">The second intList to compare, or null. </param>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.op_Inequality(Trinity.TSL.Lib.intListAccessor,Trinity.TSL.Lib.intListAccessor)">
      <summary>Determines whether two specified intList have different values.</summary>
      <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The first intList to compare, or null. </param>
      <param name="b">The second intList to compare, or null. </param>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.Equals(System.Object)">
      <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
      <param name="obj">The intList to compare to this instance.</param>
      <returns>true if <paramref name="obj" /> is a doubleList and its value is the same as this instance; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.intListAccessor.GetHashCode">
      <summary>
            Return the hash code for this intList.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:Trinity.TSL.Lib.intListAccessor.Count">
      <summary>
            Gets the number of elements actually contained in the List. 
            </summary>
    </member>
    <member name="P:Trinity.TSL.Lib.intListAccessor.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">Given index</param>
      <returns>Corresponding element at the specified index</returns>
    </member>
    <member name="T:Trinity.TSL.Lib.longListAccessor">
      <summary>
            Represents a TSL long list corresponding List{long}.
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.ToByteArray">
      <summary>
            Copies the elements to a new byte array
            </summary>
      <returns>Elements compactly arranged in a byte array.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.ForEach(System.Action{System.Int64})">
      <summary>
            Performs the specified action on each elements
            </summary>
      <param name="action">A lambda expression which has one parameter indicates element in List</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.ForEach(System.Action{System.Int64,System.Int32})">
      <summary>
            Performs the specified action on each elements
            </summary>
      <param name="action">A lambda expression which has two parameters. First indicates element in the List and second the index of this element.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.GetEnumerator">
      <summary>
            Returns an enumerator that iterate through current list.
            </summary>
      <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.Add(System.Int64)">
      <summary>
            Adds an item to the end of the List
            </summary>
      <param name="element">The object to be added to the end of the List.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.Insert(System.Int32,System.Int64)">
      <summary>
            Inserts an element into the List at the specified index.
            </summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="element">The object to insert.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.Insert(System.Int64,System.Comparison{System.Int64})">
      <summary>
            Inserts an element into the sorted List using the specified Comparison delegate.
            </summary>
      <param name="element">The element to insert.</param>
      <param name="comparison">The Comparison delegate.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the List.
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.AddRange(System.Collections.Generic.List{System.Int64})">
      <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
      <param name="list">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.AddRange(Trinity.TSL.Lib.longListAccessor)">
      <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
      <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.Clear">
      <summary>
            Removes all elements from the List
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.Contains(System.Int64)">
      <summary>
            Determines whether an element is in the List
            </summary>
      <param name="item">The object to locate in the List.The value can be null for non-atom types</param>
      <returns>true if item is found in the List; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.Exists(System.Predicate{System.Int64})">
      <summary>
            Determines whether the List contains elements that match the conditions defined by the specified predicate.
            </summary>
      <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
      <returns>true if the List contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.CopyTo(System.Int64[])">
      <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the beginning of the ptr1 array.
            </summary>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.CopyTo(System.Int64[],System.Int32)">
      <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.CopyTo(System.Int32,System.Int64[],System.Int32,System.Int32)">
      <summary>
            Copies a range of elements from the List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
      <param name="index">The zero-based index in the source List at which copying begins.</param>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>;
            <param name="count">The number of elements to copy.</param></member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.InsertRange(System.Int32,System.Collections.Generic.List{System.Int64})">
      <summary>
            Inserts the elements of a collection into the List at the specified index.
            </summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from the List.
            </summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.op_Implicit(Trinity.TSL.Lib.longListAccessor)~System.Collections.Generic.List{System.Int64}">
      <summary>
            Implicitly converts a longList instance to a List{long} instance.
            </summary>
      <param name="accessor">The longList instance.</param>
      <returns>A List{long} instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.op_Implicit(System.Collections.Generic.List{System.Int64})~Trinity.TSL.Lib.longListAccessor">
      <summary>
            Implicitly converts a List{long} instance to a longList instance.
            </summary>
      <param name="value">The List{long} instance.</param>
      <returns>A longList instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.op_Equality(Trinity.TSL.Lib.longListAccessor,Trinity.TSL.Lib.longListAccessor)">
      <summary>
            Determines whether two specified longList have the same value.
            </summary>
      <param name="a">The first longList to compare, or null. </param>
      <param name="b">The second longList to compare, or null. </param>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.op_Inequality(Trinity.TSL.Lib.longListAccessor,Trinity.TSL.Lib.longListAccessor)">
      <summary>Determines whether two specified longList have different values.</summary>
      <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The first longList to compare, or null. </param>
      <param name="b">The second longList to compare, or null. </param>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.Equals(System.Object)">
      <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
      <param name="obj">The longList to compare to this instance.</param>
      <returns>true if <paramref name="obj" /> is a longList and its value is the same as this instance; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.longListAccessor.GetHashCode">
      <summary>
            Return the hash code for this longList.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:Trinity.TSL.Lib.longListAccessor.Count">
      <summary>
            Gets the number of elements actually contained in the List. 
            </summary>
    </member>
    <member name="P:Trinity.TSL.Lib.longListAccessor.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index. 
            </summary>
      <param name="index">Given index</param>
      <returns>Corresponding element at the specified index</returns>
    </member>
    <member name="T:Trinity.TSL.Lib.NamespaceDoc">
      <summary>
            This namespace contains the basic TSL data structures.
            </summary>
    </member>
    <member name="T:Trinity.TSL.Lib.DateTimeAccessor">
      <summary>
            Represents a Trinity data type that corresponds .Net DateTime.
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.TryParse(System.String,Trinity.TSL.Lib.DateTimeAccessor@)">
      <summary>
                 Converts the specified string representation of a date and time to its <see cref="T:Trinity.TSL.Lib.DateTimeAccessor" />
                 equivalent and returns a value that indicates whether the conversion succeeded.
             </summary>
      <param name="input">
                 A string containing a date and time to convert.
             </param>
      <param name="value">
                 When this method returns, contains the <see cref="T:Trinity.TSL.Lib.DateTimeAccessor" /> value equivalent to
                 the date and time contained in s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" />
                 if the conversion failed. The conversion fails if the s parameter is null,
                 is an empty string (""), or does not contain a valid string representation
                 of a date and time. This parameter is passed uninitialized.
             </param>
      <returns>
                 true if the s parameter was converted successfully; otherwise, false.
             </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.TryParse(System.String,System.DateTime@)">
      <summary>
                 Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" />
                 equivalent and returns a value that indicates whether the conversion succeeded.
             </summary>
      <param name="input">
                 A string containing a date and time to convert.
             </param>
      <param name="value">
                 When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to
                 the date and time contained in s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" />
                 if the conversion failed. The conversion fails if the s parameter is null,
                 is an empty string (""), or does not contain a valid string representation
                 of a date and time. This parameter is passed uninitialized.
             </param>
      <returns>
                 true if the s parameter was converted successfully; otherwise, false.
             </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.ToBinary">
      <summary>
            Serializes the current DateTime object to a 64-bit binary value that subsequently can be used to recreate the DateTime object.
            </summary>
      <returns>A 64-bit signed integer that encodes the .Net DateTime. </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.ToByteArray">
      <summary>
            Returns an eight byte array that contains the value of this instance.
            </summary>
      <returns>An eight byte array.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.ToString">
      <summary>
            Converts the value of the current DateTime object to its equivalent string representation.
            </summary>
      <returns>A string representation of the value of the current DateTime object.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.ToDateTime">
      <summary>
            Converts current DateTimeAccessor instance to DateTime.
            </summary>
      <returns>A DateTime value corresponding to current DateTimeAccessor.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.op_Implicit(Trinity.TSL.Lib.DateTimeAccessor)~System.DateTime">
      <summary>
            Converts current DateTimeAccessor instance to DateTime.
            </summary>
      <param name="value">A DateTimeAccessor instance.</param>
      <returns>A DateTime value corresponding to current DateTimeAccessor.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.op_Implicit(System.DateTime)~Trinity.TSL.Lib.DateTimeAccessor">
      <summary>
            Converts a DateTime instance to DateTimeAccessor.
            </summary>
      <param name="value">A DateTime instance.</param>
      <returns>A DateTimeAccessor instance corresponding to the specified DateTime.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.op_Equality(Trinity.TSL.Lib.DateTimeAccessor,Trinity.TSL.Lib.DateTimeAccessor)">
      <summary>
            Returns a value indicating whether two given DateTimeAccessor instances have the same value.
            </summary>
      <param name="a">The first DateTimeAccessor instance.</param>
      <param name="b">The second DateTimeAccessor instance.</param>
      <returns>true if two given DateTimeAccessor instances have the same value; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.op_Inequality(Trinity.TSL.Lib.DateTimeAccessor,Trinity.TSL.Lib.DateTimeAccessor)">
      <summary>
            Returns a value indicating whether two given DateTimeAccessor instances have the same value.
            </summary>
      <param name="a">The first DateTimeAccessor instance.</param>
      <param name="b">The second DateTimeAccessor instance.</param>
      <returns>true if two given DateTimeAccessor instances do not have the same value; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="value">An object to compare to this instance.</param>
      <returns>true if value is an instance of DateTimeAccessor and equals the value of this instance; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.DateTimeAccessor.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="T:Trinity.TSL.Lib.EnumAccessor">
      <summary>
            Represents a 256-bit enum type.
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.EnumAccessor.ToByte">
      <summary>
            Gets the byte value.
            </summary>
      <returns>A byte.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.EnumAccessor.ToByteArray">
      <summary>
            Gets the underlying blob.
            </summary>
      <returns>A byte array with size one.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.EnumAccessor.op_Implicit(Trinity.TSL.Lib.EnumAccessor)~System.Byte">
      <summary>
            Converts a EnumAccessor accessor to a byte value.
            </summary>
      <param name="accessor">A EnumAccessor accessor.</param>
      <returns>A byte.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.EnumAccessor.op_Implicit(System.Byte)~Trinity.TSL.Lib.EnumAccessor">
      <summary>
            Converts a byte value to a EnumAccessor value.
            </summary>
      <param name="value">A byte value.</param>
      <returns>A EnumAccessor value.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.EnumAccessor.op_Equality(Trinity.TSL.Lib.EnumAccessor,Trinity.TSL.Lib.EnumAccessor)">
      <summary>
            Returns a value indicating whether two given EnumAccessor instances have the same value.
            </summary>
      <param name="a">A EnumAccessor instance.</param>
      <param name="b">Another EnumAccessor instance.</param>
      <returns>true if the two given EnumAccessor instances have the same value; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.EnumAccessor.op_Inequality(Trinity.TSL.Lib.EnumAccessor,Trinity.TSL.Lib.EnumAccessor)">
      <summary>
            Returns a value indicating whether two given EnumAccessor instances have the same value.
            </summary>
      <param name="a">A EnumAccessor instance.</param>
      <param name="b">Another EnumAccessor instance.</param>
      <returns>true if the two given EnumAccessor instances do not have the same value; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.EnumAccessor.Equals(System.Object)">
      <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
      <param name="obj">An object to compare with this instance or null.</param>
      <returns>true if obj is an instance of EnumAccessor and equals the value of this instance; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.EnumAccessor.GetHashCode">
      <summary>
            Returns the hash code of the underlying value.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="T:Trinity.TSL.Lib.GuidAccessor">
      <summary>
            Represents a Trinity type corresponding .Net Guid type.
            </summary>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.TryParse(System.String,Trinity.TSL.Lib.GuidAccessor@)">
      <summary>
                 Converts the string representation of a GUID to the equivalent <see cref="T:Trinity.TSL.Lib.GuidAccessor" />
                 structure.
             </summary>
      <param name="input">
                 The GUID to convert.
             </param>
      <param name="value">
                 The structure that will contain the parsed value.
             </param>
      <returns>
                 true if the parse operation was successful; otherwise, false.
             </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.TryParse(System.String,System.Guid@)">
      <summary>
                 Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" />
                 structure.
             </summary>
      <param name="input">
                 The GUID to convert.
             </param>
      <param name="value">
                 The structure that will contain the parsed value.
             </param>
      <returns>
                 true if the parse operation was successful; otherwise, false.
             </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.ToByteArray">
      <summary>
            Returns a 16 byte array that contains the value of this instance.
            </summary>
      <returns>A 16 byte array.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.ToString">
      <summary>
            Returns a string representation of the value of this instance in registry format. 
            </summary>
      <returns>Returns a string representation of the value of this instance in registry format.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.ToGuid">
      <summary>
            Converts the current instance to a Guid value.
            </summary>
      <returns>A Guid value.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.ToString(System.String)">
      <summary>
            Returns a string representation of the value of this Guid instance, according to the provided format specifier.
            </summary>
      <param name="format">A single format specifier that indicates how to format the value of this Guid. The format parameter can be "N", "D", "B", "P", or "X". If format is null or an empty string (""), "D" is used. </param>
      <returns>The value of this Guid, represented as a series of lowercase hexadecimal digits in the specified format. </returns>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.op_Implicit(Trinity.TSL.Lib.GuidAccessor)~System.Guid">
      <summary>
            Implicitly converts a GuidAccessor instance to a Guid instance.
            </summary>
      <param name="accessor">The GuidAccessor instance.</param>
      <returns>A Guid instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.op_Implicit(System.Guid)~Trinity.TSL.Lib.GuidAccessor">
      <summary>
            Implicitly converts a Guid instance to a GuidAccessor instance.
            </summary>
      <param name="value">The Guid instance.</param>
      <returns>A GuidAccessor instance.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.op_Equality(Trinity.TSL.Lib.GuidAccessor,Trinity.TSL.Lib.GuidAccessor)">
      <summary>
            Determines whether two specified GuidAccessor have the same value.
            </summary>
      <param name="a">The first GuidAccessor to compare, or null. </param>
      <param name="b">The second GuidAccessor to compare, or null. </param>
      <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.op_Inequality(Trinity.TSL.Lib.GuidAccessor,Trinity.TSL.Lib.GuidAccessor)">
      <summary>Determines whether two specified GuidAccessor have different values.</summary>
      <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
      <param name="a">The first GuidAccessor to compare, or null. </param>
      <param name="b">The second GuidAccessor to compare, or null. </param>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.Equals(System.Object)">
      <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
      <param name="obj">The GuidAccessor to compare to this instance.</param>
      <returns>true if <paramref name="obj" /> is a GuidAccessor and its value is the same as this instance; otherwise, false.</returns>
    </member>
    <member name="M:Trinity.TSL.Lib.GuidAccessor.GetHashCode">
      <summary>
            Return the hash code for this doubleList.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="T:Trinity.Utilities.FileUtility">
      <summary>
            A utility class to provide file related functions.
            </summary>
    </member>
    <member name="M:Trinity.Utilities.FileUtility.CompletePath(System.String,System.Boolean)">
      <summary>
            Complete the given file directory path to make it end with directory separator char.
            </summary>
      <param name="path">The directory path.</param>
      <param name="create_nonexistent">The directory is created if true; otherwise do thing.</param>
      <returns>The completed directory path.</returns>
    </member>
    <member name="P:Trinity.Utilities.FileUtility.RandomFileNameWithoutExtension">
      <summary>
            Gets a random file name without extension.
            </summary>
    </member>
    <member name="T:Trinity.Diagnostics.HexDump">
      <summary>
            Utility class for dumping binary data in hexadecimal format
            </summary>
    </member>
    <member name="M:Trinity.Diagnostics.HexDump.Dump(System.Byte[])">
      <summary>
            Dumps a byte array to the standard output in hexadecimal format.
            </summary>
      <param name="bytes">The byte array from which bytes are read.</param>
    </member>
    <member name="M:Trinity.Diagnostics.HexDump.PrintBits(System.Byte)">
      <summary>
            Prints the bits of the specified byte value to the console.
            </summary>
      <param name="value">The byte value.</param>
    </member>
    <member name="M:Trinity.Diagnostics.HexDump.PrintBits(System.Int32)">
      <summary>
            Prints the bits of the specified 32-bit signed integer value to the console.
            </summary>
      <param name="value">The 32-bit integer value.</param>
    </member>
    <member name="M:Trinity.Diagnostics.HexDump.PrintGuid(System.Guid)">
      <summary>
            Print the guid byte by byte.
            </summary>
      <param name="guid">The specified Guid instance.</param>
    </member>
    <member name="M:Trinity.Diagnostics.HexDump.ToString(System.Byte*,System.Int32,System.Int32)">
      <summary>
            Outputs the hexadecimal dump to a string.
            </summary>
      <param name="bytes">The buffer</param>
      <param name="length">The length of the specified buffer.</param>
      <param name="max">Max bytes to dump</param>
      <returns>
      </returns>
    </member>
    <member name="T:Trinity.Diagnostics.LogLevel">
      <summary>
            Specifies what messages to be logged.
            </summary>
    </member>
    <member name="F:Trinity.Diagnostics.LogLevel.Off">
      <summary>
            No message is logged
            </summary>
    </member>
    <member name="F:Trinity.Diagnostics.LogLevel.Fatal">
      <summary>
            Only unrecoverable system errors are logged
            </summary>
    </member>
    <member name="F:Trinity.Diagnostics.LogLevel.Error">
      <summary>
            Unrecoverable system errors and application logLevel errors are logged
            </summary>
    </member>
    <member name="F:Trinity.Diagnostics.LogLevel.Warning">
      <summary>
            Fatal system error, application error and application warning are logged
            </summary>
    </member>
    <member name="F:Trinity.Diagnostics.LogLevel.Info">
      <summary>
            All errors, warnings and notable application messages are logged
            </summary>
    </member>
    <member name="F:Trinity.Diagnostics.LogLevel.Debug">
      <summary>
            All errors, warnings, application messages and debugging messages are logged
            </summary>
    </member>
    <member name="F:Trinity.Diagnostics.LogLevel.Verbose">
      <summary>
            All messages are logged
            </summary>
    </member>
    <member name="T:Trinity.Diagnostics.Log">
      <summary>
            Utility class for logging system and application messages. 
            </summary>
    </member>
    <member name="M:Trinity.Diagnostics.Log.Flush">
      <summary>
            Flushes the log content to the disk immediately. Note that for
            messages with LogLevel equal to LogLevel.Info or higher, the log
            will be automatically flushed immediately. Lower priority logs
            (LogLevel.Debug and LogLevel.Verbose) will be flushed periodically.
            </summary>
    </member>
    <member name="M:Trinity.Diagnostics.Log.WriteLine(System.String,System.Object[])">
      <summary>
            Writes the text representation of the specified array of objects, followed by the current line terminator, to the log using the specified format information.
            </summary>
      <param name="format">A composite format string.</param>
      <param name="arg">An array of objects to write using format.</param>
    </member>
    <member name="M:Trinity.Diagnostics.Log.WriteLine(Trinity.Diagnostics.LogLevel,System.String,System.Object[])">
      <summary>
            Writes the text representation of the specified array of objects, followed by the current line terminator, to the log using the specified format information at the specified logging level.
            </summary>
      <param name="logLevel">The logging level at which the message is written.</param>
      <param name="format">A composite format string.</param>
      <param name="arg">An array of objects to write using format.</param>
    </member>
    <member name="P:Trinity.Diagnostics.Log.EchoOnConsole">
      <summary>
            Gets of sets a value indicating whether the logged messages are echoed to the Console.
            </summary>
    </member>
    <member name="T:Trinity.Utilities.IPAddressComparer">
      <summary>
            Represents a <see cref="T:System.Net.IPAddress" /> comparison operation.
            </summary>
    </member>
    <member name="M:Trinity.Utilities.IPAddressComparer.Compare(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>
            Compares two IPAddresses and returns an indication of their relative sort order.
            </summary>
      <param name="x">An IPAddress to compare to <paramref name="y" />.</param>
      <param name="y">An IPAddress to compare to <paramref name="x" />.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Trinity.Utilities.IPEndPointComparer">
      <summary>
            Represents a <see cref="T:System.Net.IPEndPoint" /> comparison operation.
            </summary>
    </member>
    <member name="M:Trinity.Utilities.IPEndPointComparer.Compare(System.Net.IPEndPoint,System.Net.IPEndPoint)">
      <summary>
            Compares two IPEndPoints and returns an indication of their relative sort order.
            </summary>
      <param name="x">An IPEndPoint to compare to <paramref name="y" />.</param>
      <param name="y">An IPEndPoint to compare to <paramref name="x" />.</param>
      <returns>
      </returns>
    </member>
  </members>
</doc>